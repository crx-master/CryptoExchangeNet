<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpCryptoExchange</name>
    </assembly>
    <members>
        <member name="T:SharpCryptoExchange.Attributes.JsonConversionAttribute">
            <summary>
            Used for conversion in ArrayConverter
            </summary>
        </member>
        <member name="T:SharpCryptoExchange.Attributes.MapAttribute">
            <summary>
            Map a enum entry to string values
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Attributes.MapAttribute.Values">
            <summary>
            Values mapping to the enum entry
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Attributes.MapAttribute.#ctor(System.String[])">
            <summary>
            ctor
            </summary>
            <param name="maps"></param>
        </member>
        <member name="T:SharpCryptoExchange.Authentication.ApiCredentials">
            <summary>
            Api credentials, used to sign requests accessing private endpoints
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Authentication.ApiCredentials.Key">
            <summary>
            The api key to authenticate requests
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Authentication.ApiCredentials.Secret">
            <summary>
            The api secret to authenticate requests
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Authentication.ApiCredentials.PrivateKey">
            <summary>
            The private key to authenticate requests
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Authentication.ApiCredentials.#ctor(SharpCryptoExchange.Authentication.PrivateKey)">
            <summary>
            Create Api credentials providing a private key for authentication
            </summary>
            <param name="privateKey">The private key used for signing</param>
        </member>
        <member name="M:SharpCryptoExchange.Authentication.ApiCredentials.#ctor(System.Security.SecureString,System.Security.SecureString)">
            <summary>
            Create Api credentials providing an api key and secret for authentication
            </summary>
            <param name="key">The api key used for identification</param>
            <param name="secret">The api secret used for signing</param>
        </member>
        <member name="M:SharpCryptoExchange.Authentication.ApiCredentials.#ctor(System.String,System.String)">
            <summary>
            Create Api credentials providing an api key and secret for authentication
            </summary>
            <param name="key">The api key used for identification</param>
            <param name="secret">The api secret used for signing</param>
        </member>
        <member name="M:SharpCryptoExchange.Authentication.ApiCredentials.Copy">
            <summary>
            Copy the credentials
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Authentication.ApiCredentials.#ctor(System.IO.Stream,System.String,System.String)">
            <summary>
            Create Api credentials providing a stream containing json data. The json data should include two values: apiKey and apiSecret
            </summary>
            <param name="inputStream">The stream containing the json data</param>
            <param name="identifierKey">A key to identify the credentials for the API. For example, when set to `binanceKey` the json data should contain a value for the property `binanceKey`. Defaults to 'apiKey'.</param>
            <param name="identifierSecret">A key to identify the credentials for the API. For example, when set to `binanceSecret` the json data should contain a value for the property `binanceSecret`. Defaults to 'apiSecret'.</param>
        </member>
        <member name="M:SharpCryptoExchange.Authentication.ApiCredentials.TryGetValue(Newtonsoft.Json.Linq.JToken,System.String)">
            <summary>
            Try get the value of a key from a JToken
            </summary>
            <param name="data"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Authentication.ApiCredentials.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:SharpCryptoExchange.Authentication.AuthenticationProvider">
            <summary>
            Base class for authentication providers
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Authentication.AuthenticationProvider.Credentials">
            <summary>
            The provided credentials
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.Authentication.AuthenticationProvider._sBytes">
            <summary>
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Authentication.AuthenticationProvider.#ctor(SharpCryptoExchange.Authentication.ApiCredentials)">
            <summary>
            ctor
            </summary>
            <param name="credentials"></param>
        </member>
        <member name="M:SharpCryptoExchange.Authentication.AuthenticationProvider.AuthenticateRequest(SharpCryptoExchange.RestApiClient,System.Uri,System.Net.Http.HttpMethod,System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,SharpCryptoExchange.Objects.ArrayParametersSerialization,SharpCryptoExchange.Objects.HttpMethodParameterPosition,System.Collections.Generic.SortedDictionary{System.String,System.Object}@,System.Collections.Generic.SortedDictionary{System.String,System.Object}@,System.Collections.Generic.Dictionary{System.String,System.String}@)">
            <summary>
            Authenticate a request. Output parameters should include the providedParameters input
            </summary>
            <param name="apiClient">The Api client sending the request</param>
            <param name="uri">The uri for the request</param>
            <param name="method">The method of the request</param>
            <param name="providedParameters">The request parameters</param>
            <param name="auth">If the requests should be authenticated</param>
            <param name="arraySerialization">Array serialization type</param>
            <param name="parameterPosition">The position where the providedParameters should go</param>
            <param name="uriParameters">Parameters that need to be in the Uri of the request. Should include the provided parameters if they should go in the uri</param>
            <param name="bodyParameters">Parameters that need to be in the body of the request. Should include the provided parameters if they should go in the body</param>
            <param name="headers">The headers that should be send with the request</param>
        </member>
        <member name="M:SharpCryptoExchange.Authentication.AuthenticationProvider.SignSHA256Bytes(System.String)">
            <summary>
            SHA256 sign the data and return the bytes
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Authentication.AuthenticationProvider.SignSHA256(System.String,System.Nullable{SharpCryptoExchange.Authentication.SignOutputType})">
            <summary>
            SHA256 sign the data and return the hash
            </summary>
            <param name="data">Data to sign</param>
            <param name="outputType">String type</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Authentication.AuthenticationProvider.SignSHA384(System.String,System.Nullable{SharpCryptoExchange.Authentication.SignOutputType})">
            <summary>
            SHA384 sign the data and return the hash
            </summary>
            <param name="data">Data to sign</param>
            <param name="outputType">String type</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Authentication.AuthenticationProvider.SignSHA512(System.String,System.Nullable{SharpCryptoExchange.Authentication.SignOutputType})">
            <summary>
            SHA512 sign the data and return the hash
            </summary>
            <param name="data">Data to sign</param>
            <param name="outputType">String type</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Authentication.AuthenticationProvider.SignMD5(System.String,System.Nullable{SharpCryptoExchange.Authentication.SignOutputType})">
            <summary>
            MD5 sign the data and return the hash
            </summary>
            <param name="data">Data to sign</param>
            <param name="outputType">String type</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Authentication.AuthenticationProvider.SignHMACSHA256(System.String,System.Nullable{SharpCryptoExchange.Authentication.SignOutputType})">
            <summary>
            HMACSHA256 sign the data and return the hash
            </summary>
            <param name="data">Data to sign</param>
            <param name="outputType">String type</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Authentication.AuthenticationProvider.SignHMACSHA384(System.String,System.Nullable{SharpCryptoExchange.Authentication.SignOutputType})">
            <summary>
            HMACSHA384 sign the data and return the hash
            </summary>
            <param name="data">Data to sign</param>
            <param name="outputType">String type</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Authentication.AuthenticationProvider.SignHMACSHA512(System.String,System.Nullable{SharpCryptoExchange.Authentication.SignOutputType})">
            <summary>
            HMACSHA512 sign the data and return the hash
            </summary>
            <param name="data">Data to sign</param>
            <param name="outputType">String type</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Authentication.AuthenticationProvider.SignHMACSHA512(System.Byte[],System.Nullable{SharpCryptoExchange.Authentication.SignOutputType})">
            <summary>
            HMACSHA512 sign the data and return the hash
            </summary>
            <param name="data">Data to sign</param>
            <param name="outputType">String type</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Authentication.AuthenticationProvider.Sign(System.String)">
            <summary>
            Sign a string
            </summary>
            <param name="toSign"></param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Authentication.AuthenticationProvider.Sign(System.Byte[])">
            <summary>
            Sign a byte array
            </summary>
            <param name="toSign"></param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Authentication.AuthenticationProvider.BytesToHexString(System.Byte[])">
            <summary>
            Convert byte array to hex string
            </summary>
            <param name="buff"></param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Authentication.AuthenticationProvider.BytesToBase64String(System.Byte[])">
            <summary>
            Convert byte array to base64 string
            </summary>
            <param name="buff"></param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Authentication.AuthenticationProvider.GetTimestamp(SharpCryptoExchange.RestApiClient)">
            <summary>
            Get current timestamp including the time sync offset from the api client
            </summary>
            <param name="apiClient"></param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Authentication.AuthenticationProvider.GetMillisecondTimestamp(SharpCryptoExchange.RestApiClient)">
            <summary>
            Get millisecond timestamp as a string including the time sync offset from the api client
            </summary>
            <param name="apiClient"></param>
            <returns></returns>
        </member>
        <member name="T:SharpCryptoExchange.Authentication.PrivateKey">
            <summary>
            Private key info
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Authentication.PrivateKey.Key">
            <summary>
            The private key
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Authentication.PrivateKey.Passphrase">
            <summary>
            The private key's pass phrase
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Authentication.PrivateKey.IsEncrypted">
            <summary>
            Indicates if the private key is encrypted or not
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Authentication.PrivateKey.#ctor(System.Security.SecureString,System.Security.SecureString)">
            <summary>
            Create a private key providing an encrypted key information
            </summary>
            <param name="key">The private key used for signing</param>
            <param name="passphrase">The private key's passphrase</param>
        </member>
        <member name="M:SharpCryptoExchange.Authentication.PrivateKey.#ctor(System.String,System.String)">
            <summary>
            Create a private key providing an encrypted key information
            </summary>
            <param name="key">The private key used for signing</param>
            <param name="passphrase">The private key's passphrase</param>
        </member>
        <member name="M:SharpCryptoExchange.Authentication.PrivateKey.#ctor(System.Security.SecureString)">
            <summary>
            Create a private key providing an unencrypted key information
            </summary>
            <param name="key">The private key used for signing</param>
        </member>
        <member name="M:SharpCryptoExchange.Authentication.PrivateKey.#ctor(System.String)">
            <summary>
            Create a private key providing an encrypted key information
            </summary>
            <param name="key">The private key used for signing</param>
        </member>
        <member name="M:SharpCryptoExchange.Authentication.PrivateKey.Copy">
            <summary>
            Copy the private key
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Authentication.PrivateKey.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:SharpCryptoExchange.Authentication.SignOutputType">
            <summary>
            Output string type
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.Authentication.SignOutputType.Hex">
            <summary>
            Hex string
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.Authentication.SignOutputType.Base64">
            <summary>
            Base64 string
            </summary>
        </member>
        <member name="T:SharpCryptoExchange.BaseApiClient">
            <summary>
            Base API for all API clients
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.BaseApiClient.AuthenticationProvider">
            <summary>
            The authentication provider for this API client. (null if no credentials are set)
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.BaseApiClient.ParameterPositions">
            <summary>
            Where to put the parameters for requests with different Http methods
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.BaseApiClient.requestBodyFormat">
            <summary>
            Request body content type
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.BaseApiClient.manualParseError">
            <summary>
            Whether or not we need to manually parse an error instead of relying on the http status code
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.BaseApiClient.arraySerialization">
            <summary>
            How to serialize array parameters when making requests
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.BaseApiClient.requestBodyEmptyContent">
            <summary>
            What request body should be set when no data is send (only used in combination with postParametersPosition.InBody)
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.BaseApiClient.BaseAddress">
            <summary>
            The base address for this API client
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.BaseApiClient.Options">
            <summary>
            Api client options
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.BaseApiClient.#ctor(SharpCryptoExchange.Objects.BaseClientOptions,SharpCryptoExchange.Objects.ApiClientOptions)">
            <summary>
            ctor
            </summary>
            <param name="options">Client options</param>
            <param name="apiOptions">Api client options</param>
        </member>
        <member name="M:SharpCryptoExchange.BaseApiClient.CreateAuthenticationProvider(SharpCryptoExchange.Authentication.ApiCredentials)">
            <summary>
            Create an AuthenticationProvider implementation instance based on the provided credentials
            </summary>
            <param name="credentials"></param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.BaseApiClient.SetApiCredentials(SharpCryptoExchange.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:SharpCryptoExchange.BaseApiClient.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:SharpCryptoExchange.BaseClient">
            <summary>
            The base for all clients, websocket client and rest client
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.BaseClient.Name">
            <summary>
            The name of the API the client is for
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.BaseClient.ApiClients">
            <summary>
            Api clients in this client
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.BaseClient.Log">
            <summary>
            The log object
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.BaseClient.LastId">
            <summary>
            The last used id, use NextId() to get the next id and up this
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.BaseClient._idLock">
            <summary>
            Lock for id generating
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.BaseClient.defaultSerializer">
            <summary>
            A default serializer
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.BaseClient.ClientOptions">
            <summary>
            Provided client options
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.BaseClient.#ctor(System.String,SharpCryptoExchange.Objects.BaseClientOptions)">
            <summary>
            ctor
            </summary>
            <param name="name">The name of the API this client is for</param>
            <param name="options">The options for this client</param>
        </member>
        <member name="M:SharpCryptoExchange.BaseClient.AddApiClient``1(``0)">
            <summary>
            Register an API client
            </summary>
            <param name="apiClient">The client</param>
        </member>
        <member name="M:SharpCryptoExchange.BaseClient.ValidateJson(System.String)">
            <summary>
            Tries to parse the json data and return a JToken, validating the input not being empty and being valid json
            </summary>
            <param name="data">The data to parse</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.BaseClient.Deserialize``1(System.String,Newtonsoft.Json.JsonSerializer,System.Nullable{System.Int32})">
            <summary>
            Deserialize a string into an object
            </summary>
            <typeparam name="T">The type to deserialize into</typeparam>
            <param name="data">The data to deserialize</param>
            <param name="serializer">A specific serializer to use</param>
            <param name="requestId">Id of the request the data is returned from (used for grouping logging by request)</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.BaseClient.Deserialize``1(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.JsonSerializer,System.Nullable{System.Int32})">
            <summary>
            Deserialize a JToken into a CallResult
            </summary>
            <typeparam name="T">The type of Data to deserialize into</typeparam>
            <param name="obj">The data to deserialize</param>
            <param name="serializer">A specific serializer to use</param>
            <param name="requestId">Id of the request the data is returned from (used for grouping logging by request)</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.BaseClient.DeserializeAsync``1(System.IO.Stream,Newtonsoft.Json.JsonSerializer,System.Nullable{System.Int32},System.Nullable{System.Int64})">
            <summary>
            Deserialize a stream into an object
            </summary>
            <typeparam name="T">The type to deserialize into</typeparam>
            <param name="stream">The stream to deserialize</param>
            <param name="serializer">A specific serializer to use</param>
            <param name="requestId">Id of the request the data is returned from (used for grouping logging by request)</param>
            <param name="elapsedMilliseconds">Milliseconds response time for the request this stream is a response for</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.BaseClient.NextId">
            <summary>
            Generate a new unique id. The id is staticly stored so it is guarenteed to be unique across different client instances
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.BaseClient.HandleLogConfigChange">
            <summary>
            Handle a change in the client options log config
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.BaseClient.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:SharpCryptoExchange.BaseRestClient">
            <summary>
            Base rest client
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.BaseRestClient.RequestFactory">
            <summary>
            The factory for creating requests. Used for unit testing
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.BaseRestClient.TotalRequestsMade">
            <inheritdoc />
        </member>
        <member name="P:SharpCryptoExchange.BaseRestClient.StandardRequestHeaders">
            <summary>
            Request headers to be sent with each request
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.BaseRestClient.ClientOptions">
            <summary>
            Client options
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.BaseRestClient.#ctor(System.String,SharpCryptoExchange.Objects.BaseRestClientOptions)">
            <summary>
            ctor
            </summary>
            <param name="name">The name of the API this client is for</param>
            <param name="options">The options for this client</param>
        </member>
        <member name="M:SharpCryptoExchange.BaseRestClient.SetApiCredentials(SharpCryptoExchange.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:SharpCryptoExchange.BaseRestClient.SendRequestAsync(SharpCryptoExchange.RestApiClient,System.Uri,System.Net.Http.HttpMethod,System.Threading.CancellationToken,System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,System.Nullable{SharpCryptoExchange.Objects.HttpMethodParameterPosition},System.Nullable{SharpCryptoExchange.Objects.ArrayParametersSerialization},System.Int32,Newtonsoft.Json.JsonSerializer,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            Execute a request to the uri and returns if it was successful
            </summary>
            <param name="apiClient">The API client the request is for</param>
            <param name="uri">The uri to send the request to</param>
            <param name="method">The method of the request</param>
            <param name="cancellationToken">Cancellation token</param>
            <param name="parameters">The parameters of the request</param>
            <param name="signed">Whether or not the request should be authenticated</param>
            <param name="parameterPosition">Where the parameters should be placed, overwrites the value set in the client</param>
            <param name="arraySerialization">How array parameters should be serialized, overwrites the value set in the client</param>
            <param name="requestWeight">Credits used for the request</param>
            <param name="deserializer">The JsonSerializer to use for deserialization</param>
            <param name="additionalHeaders">Additional headers to send with the request</param>
            <param name="ignoreRatelimit">Ignore rate limits for this request</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.BaseRestClient.SendRequestAsync``1(SharpCryptoExchange.RestApiClient,System.Uri,System.Net.Http.HttpMethod,System.Threading.CancellationToken,System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,System.Nullable{SharpCryptoExchange.Objects.HttpMethodParameterPosition},System.Nullable{SharpCryptoExchange.Objects.ArrayParametersSerialization},System.Int32,Newtonsoft.Json.JsonSerializer,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            Execute a request to the uri and deserialize the response into the provided type parameter
            </summary>
            <typeparam name="T">The type to deserialize into</typeparam>
            <param name="apiClient">The API client the request is for</param>
            <param name="uri">The uri to send the request to</param>
            <param name="method">The method of the request</param>
            <param name="cancellationToken">Cancellation token</param>
            <param name="parameters">The parameters of the request</param>
            <param name="signed">Whether or not the request should be authenticated</param>
            <param name="parameterPosition">Where the parameters should be placed, overwrites the value set in the client</param>
            <param name="arraySerialization">How array parameters should be serialized, overwrites the value set in the client</param>
            <param name="requestWeight">Credits used for the request</param>
            <param name="deserializer">The JsonSerializer to use for deserialization</param>
            <param name="additionalHeaders">Additional headers to send with the request</param>
            <param name="ignoreRatelimit">Ignore rate limits for this request</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.BaseRestClient.PrepareRequestAsync(SharpCryptoExchange.RestApiClient,System.Uri,System.Net.Http.HttpMethod,System.Threading.CancellationToken,System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,System.Nullable{SharpCryptoExchange.Objects.HttpMethodParameterPosition},System.Nullable{SharpCryptoExchange.Objects.ArrayParametersSerialization},System.Int32,Newtonsoft.Json.JsonSerializer,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            Prepares a request to be sent to the server
            </summary>
            <param name="apiClient">The API client the request is for</param>
            <param name="uri">The uri to send the request to</param>
            <param name="method">The method of the request</param>
            <param name="cancellationToken">Cancellation token</param>
            <param name="parameters">The parameters of the request</param>
            <param name="signed">Whether or not the request should be authenticated</param>
            <param name="parameterPosition">Where the parameters should be placed, overwrites the value set in the client</param>
            <param name="arraySerialization">How array parameters should be serialized, overwrites the value set in the client</param>
            <param name="requestWeight">Credits used for the request</param>
            <param name="deserializer">The JsonSerializer to use for deserialization</param>
            <param name="additionalHeaders">Additional headers to send with the request</param>
            <param name="ignoreRatelimit">Ignore rate limits for this request</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.BaseRestClient.GetResponseAsync``1(SharpCryptoExchange.BaseApiClient,SharpCryptoExchange.Interfaces.IRequest,Newtonsoft.Json.JsonSerializer,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Executes the request and returns the result deserialized into the type parameter class
            </summary>
            <param name="apiClient">The client making the request</param>
            <param name="request">The request object to execute</param>
            <param name="deserializer">The JsonSerializer to use for deserialization</param>
            <param name="cancellationToken">Cancellation token</param>
            <param name="expectedEmptyResponse">If an empty response is expected</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.BaseRestClient.TryParseErrorAsync(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Can be used to parse an error even though response status indicates success. Some apis always return 200 OK, even though there is an error.
            When setting manualParseError to true this method will be called for each response to be able to check if the response is an error or not.
            If the response is an error this method should return the parsed error, else it should return null
            </summary>
            <param name="data">Received data</param>
            <returns>Null if not an error, Error otherwise</returns>
        </member>
        <member name="M:SharpCryptoExchange.BaseRestClient.ConstructRequest(SharpCryptoExchange.RestApiClient,System.Uri,System.Net.Http.HttpMethod,System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,SharpCryptoExchange.Objects.HttpMethodParameterPosition,SharpCryptoExchange.Objects.ArrayParametersSerialization,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates a request object
            </summary>
            <param name="apiClient">The API client the request is for</param>
            <param name="uri">The uri to send the request to</param>
            <param name="method">The method of the request</param>
            <param name="parameters">The parameters of the request</param>
            <param name="signed">Whether or not the request should be authenticated</param>
            <param name="parameterPosition">Where the parameters should be placed</param>
            <param name="arraySerialization">How array parameters should be serialized</param>
            <param name="requestId">Unique id of a request</param>
            <param name="additionalHeaders">Additional headers to send with the request</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.BaseRestClient.WriteParamBody(SharpCryptoExchange.BaseApiClient,SharpCryptoExchange.Interfaces.IRequest,System.Collections.Generic.SortedDictionary{System.String,System.Object},System.String)">
            <summary>
            Writes the parameters of the request to the request object body
            </summary>
            <param name="apiClient">The client making the request</param>
            <param name="request">The request to set the parameters on</param>
            <param name="parameters">The parameters to set</param>
            <param name="contentType">The content type of the data</param>
        </member>
        <member name="M:SharpCryptoExchange.BaseRestClient.ParseErrorResponse(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Parse an error response from the server. Only used when server returns a status other than Success(200)
            </summary>
            <param name="error">The string the request returned</param>
            <returns></returns>
        </member>
        <member name="T:SharpCryptoExchange.BaseSocketClient">
            <summary>
            Base for socket client implementations
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.BaseSocketClient.SocketFactory">
            <summary>
            The factory for creating sockets. Used for unit testing
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.BaseSocketClient.SocketConnections">
            <summary>
            List of socket connections currently connecting/connected
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.BaseSocketClient.semaphoreSlim">
            <summary>
            Semaphore used while creating sockets
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.BaseSocketClient.KeepAliveInterval">
            <summary>
            Keep alive interval for websocket connection
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.BaseSocketClient.dataInterpreterBytes">
            <summary>
            Delegate used for processing byte data received from socket connections before it is processed by handlers
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.BaseSocketClient.dataInterpreterString">
            <summary>
            Delegate used for processing string data received from socket connections before it is processed by handlers
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.BaseSocketClient.genericHandlers">
            <summary>
            Handlers for data from the socket which doesn't need to be forwarded to the caller. Ping or welcome messages for example.
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.BaseSocketClient.periodicTask">
            <summary>
            The task that is sending periodic data on the websocket. Can be used for sending Ping messages every x seconds or similair. Not necesarry.
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.BaseSocketClient.periodicEvent">
            <summary>
            Wait event for the periodicTask
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.BaseSocketClient.disposing">
            <summary>
            If client is disposing
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.BaseSocketClient.ContinueOnQueryResponse">
            <summary>
            If true; data which is a response to a query will also be distributed to subscriptions
            If false; data which is a response to a query won't get forwarded to subscriptions as well
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.BaseSocketClient.UnhandledMessageExpected">
            <summary>
            If a message is received on the socket which is not handled by a handler this boolean determines whether this logs an error message
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.BaseSocketClient.RateLimitPerSocketPerSecond">
            <summary>
            The max amount of outgoing messages per socket per second
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.BaseSocketClient.IncomingKbps">
            <inheritdoc />
        </member>
        <member name="P:SharpCryptoExchange.BaseSocketClient.CurrentConnections">
            <inheritdoc />
        </member>
        <member name="P:SharpCryptoExchange.BaseSocketClient.CurrentSubscriptions">
            <inheritdoc />
        </member>
        <member name="P:SharpCryptoExchange.BaseSocketClient.ClientOptions">
            <summary>
            Client options
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.BaseSocketClient.#ctor(System.String,SharpCryptoExchange.Objects.BaseSocketClientOptions)">
            <summary>
            ctor
            </summary>
            <param name="name">The name of the API this client is for</param>
            <param name="options">The options for this client</param>
        </member>
        <member name="M:SharpCryptoExchange.BaseSocketClient.SetApiCredentials(SharpCryptoExchange.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:SharpCryptoExchange.BaseSocketClient.SetDataInterpreter(System.Func{System.Byte[],System.String},System.Func{System.String,System.String})">
            <summary>
            Set a delegate to be used for processing data received from socket connections before it is processed by handlers
            </summary>
            <param name="byteHandler">Handler for byte data</param>
            <param name="stringHandler">Handler for string data</param>
        </member>
        <member name="M:SharpCryptoExchange.BaseSocketClient.SubscribeAsync``1(SharpCryptoExchange.SocketApiClient,System.Object,System.String,System.Boolean,System.Action{SharpCryptoExchange.Sockets.DataEvent{``0}},System.Threading.CancellationToken)">
            <summary>
            Connect to an url and listen for data on the BaseAddress
            </summary>
            <typeparam name="T">The type of the expected data</typeparam>
            <param name="apiClient">The API client the subscription is for</param>
            <param name="request">The optional request object to send, will be serialized to json</param>
            <param name="identifier">The identifier to use, necessary if no request object is sent</param>
            <param name="authenticated">If the subscription is to an authenticated endpoint</param>
            <param name="dataHandler">The handler of update data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.BaseSocketClient.SubscribeAsync``1(SharpCryptoExchange.SocketApiClient,System.String,System.Object,System.String,System.Boolean,System.Action{SharpCryptoExchange.Sockets.DataEvent{``0}},System.Threading.CancellationToken)">
            <summary>
            Connect to an url and listen for data
            </summary>
            <typeparam name="T">The type of the expected data</typeparam>
            <param name="apiClient">The API client the subscription is for</param>
            <param name="url">The URL to connect to</param>
            <param name="request">The optional request object to send, will be serialized to json</param>
            <param name="identifier">The identifier to use, necessary if no request object is sent</param>
            <param name="authenticated">If the subscription is to an authenticated endpoint</param>
            <param name="dataHandler">The handler of update data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.BaseSocketClient.SubscribeAndWaitAsync(SharpCryptoExchange.Sockets.SocketConnection,System.Object,SharpCryptoExchange.Sockets.SocketSubscription)">
            <summary>
            Sends the subscribe request and waits for a response to that request
            </summary>
            <param name="socketConnection">The connection to send the request on</param>
            <param name="request">The request to send, will be serialized to json</param>
            <param name="subscription">The subscription the request is for</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.BaseSocketClient.QueryAsync``1(SharpCryptoExchange.SocketApiClient,System.Object,System.Boolean)">
            <summary>
            Send a query on a socket connection to the BaseAddress and wait for the response
            </summary>
            <typeparam name="T">Expected result type</typeparam>
            <param name="apiClient">The API client the query is for</param>
            <param name="request">The request to send, will be serialized to json</param>
            <param name="authenticated">If the query is to an authenticated endpoint</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.BaseSocketClient.QueryAsync``1(SharpCryptoExchange.SocketApiClient,System.String,System.Object,System.Boolean)">
            <summary>
            Send a query on a socket connection and wait for the response
            </summary>
            <typeparam name="T">The expected result type</typeparam>
            <param name="apiClient">The API client the query is for</param>
            <param name="url">The url for the request</param>
            <param name="request">The request to send</param>
            <param name="authenticated">Whether the socket should be authenticated</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.BaseSocketClient.QueryAndWaitAsync``1(SharpCryptoExchange.Sockets.SocketConnection,System.Object)">
            <summary>
            Sends the query request and waits for the result
            </summary>
            <typeparam name="T">The expected result type</typeparam>
            <param name="socket">The connection to send and wait on</param>
            <param name="request">The request to send</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.BaseSocketClient.ConnectIfNeededAsync(SharpCryptoExchange.Sockets.SocketConnection,System.Boolean)">
            <summary>
            Checks if a socket needs to be connected and does so if needed. Also authenticates on the socket if needed
            </summary>
            <param name="socket">The connection to check</param>
            <param name="authenticated">Whether the socket should authenticated</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.BaseSocketClient.HandleQueryResponse``1(SharpCryptoExchange.Sockets.SocketConnection,System.Object,Newtonsoft.Json.Linq.JToken,SharpCryptoExchange.Objects.CallResult{``0}@)">
            <summary>
            The socketConnection received data (the data JToken parameter). The implementation of this method should check if the received data is a response to the query that was send (the request parameter).
            For example; A query is sent in a request message with an Id parameter with value 10. The socket receives data and calls this method to see if the data it received is an
            anwser to any query that was done. The implementation of this method should check if the response.Id == request.Id to see if they match (assuming the api has some sort of Id tracking on messages,
            if not some other method has be implemented to match the messages).
            If the messages match, the callResult out parameter should be set with the deserialized data in the from of (T) and return true.
            </summary>
            <typeparam name="T">The type of response that is expected on the query</typeparam>
            <param name="socketConnection">The socket connection</param>
            <param name="request">The request that a response is awaited for</param>
            <param name="data">The message received from the server</param>
            <param name="callResult">The interpretation (null if message wasn't a response to the request)</param>
            <returns>True if the message was a response to the query</returns>
        </member>
        <member name="M:SharpCryptoExchange.BaseSocketClient.HandleSubscriptionResponse(SharpCryptoExchange.Sockets.SocketConnection,SharpCryptoExchange.Sockets.SocketSubscription,System.Object,Newtonsoft.Json.Linq.JToken,SharpCryptoExchange.Objects.CallResult{System.Object}@)">
            <summary>
            The socketConnection received data (the data JToken parameter). The implementation of this method should check if the received data is a response to the subscription request that was send (the request parameter).
            For example; A subscribe request message is send with an Id parameter with value 10. The socket receives data and calls this method to see if the data it received is an
            anwser to any subscription request that was done. The implementation of this method should check if the response.Id == request.Id to see if they match (assuming the api has some sort of Id tracking on messages,
            if not some other method has be implemented to match the messages).
            If the messages match, the callResult out parameter should be set with the deserialized data in the from of (T) and return true.
            </summary>
            <param name="socketConnection">The socket connection</param>
            <param name="subscription">A subscription that waiting for a subscription response</param>
            <param name="request">The request that the subscription sent</param>
            <param name="data">The message received from the server</param>
            <param name="callResult">The interpretation (null if message wasn't a response to the request)</param>
            <returns>True if the message was a response to the subscription request</returns>
        </member>
        <member name="M:SharpCryptoExchange.BaseSocketClient.MessageMatchesHandler(SharpCryptoExchange.Sockets.SocketConnection,Newtonsoft.Json.Linq.JToken,System.Object)">
            <summary>
            Needs to check if a received message matches a handler by request. After subscribing data message will come in. These data messages need to be matched to a specific connection
            to pass the correct data to the correct handler. The implementation of this method should check if the message received matches the subscribe request that was sent.
            </summary>
            <param name="socketConnection">The socket connection the message was recieved on</param>
            <param name="message">The received data</param>
            <param name="request">The subscription request</param>
            <returns>True if the message is for the subscription which sent the request</returns>
        </member>
        <member name="M:SharpCryptoExchange.BaseSocketClient.MessageMatchesHandler(SharpCryptoExchange.Sockets.SocketConnection,Newtonsoft.Json.Linq.JToken,System.String)">
            <summary>
            Needs to check if a received message matches a handler by identifier. Generally used by GenericHandlers. For example; a generic handler is registered which handles ping messages
            from the server. This method should check if the message received is a ping message and the identifer is the identifier of the GenericHandler
            </summary>
            <param name="socketConnection">The socket connection the message was recieved on</param>
            <param name="message">The received data</param>
            <param name="identifier">The string identifier of the handler</param>
            <returns>True if the message is for the handler which has the identifier</returns>
        </member>
        <member name="M:SharpCryptoExchange.BaseSocketClient.AuthenticateSocketAsync(SharpCryptoExchange.Sockets.SocketConnection)">
            <summary>
            Needs to authenticate the socket so authenticated queries/subscriptions can be made on this socket connection
            </summary>
            <param name="socketConnection">The socket connection that should be authenticated</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.BaseSocketClient.UnsubscribeAsync(SharpCryptoExchange.Sockets.SocketConnection,SharpCryptoExchange.Sockets.SocketSubscription)">
            <summary>
            Needs to unsubscribe a subscription, typically by sending an unsubscribe request. If multiple subscriptions per socket is not allowed this can just return since the socket will be closed anyway
            </summary>
            <param name="connection">The connection on which to unsubscribe</param>
            <param name="subscriptionToUnsub">The subscription to unsubscribe</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.BaseSocketClient.ProcessTokenData(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Optional handler to interpolate data before sending it to the handlers
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.BaseSocketClient.AddSubscription``1(System.Object,System.String,System.Boolean,SharpCryptoExchange.Sockets.SocketConnection,System.Action{SharpCryptoExchange.Sockets.DataEvent{``0}},System.Boolean)">
            <summary>
            Add a subscription to a connection
            </summary>
            <typeparam name="T">The type of data the subscription expects</typeparam>
            <param name="request">The request of the subscription</param>
            <param name="identifier">The identifier of the subscription (can be null if request param is used)</param>
            <param name="userSubscription">Whether or not this is a user subscription (counts towards the max amount of handlers on a socket)</param>
            <param name="connection">The socket connection the handler is on</param>
            <param name="dataHandler">The handler of the data received</param>
            <param name="authenticated">Whether the subscription needs authentication</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.BaseSocketClient.AddGenericHandler(System.String,System.Action{SharpCryptoExchange.Sockets.MessageEvent})">
            <summary>
            Adds a generic message handler. Used for example to reply to ping requests
            </summary>
            <param name="identifier">The name of the request handler. Needs to be unique</param>
            <param name="action">The action to execute when receiving a message for this handler (checked by <see cref="M:SharpCryptoExchange.BaseSocketClient.MessageMatchesHandler(SharpCryptoExchange.Sockets.SocketConnection,Newtonsoft.Json.Linq.JToken,System.String)"/>)</param>
        </member>
        <member name="M:SharpCryptoExchange.BaseSocketClient.GetConnectionUrlAsync(SharpCryptoExchange.SocketApiClient,System.String,System.Boolean)">
            <summary>
            Get the url to connect to (defaults to BaseAddress form the client options)
            </summary>
            <param name="apiClient"></param>
            <param name="address"></param>
            <param name="authentication"></param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.BaseSocketClient.GetReconnectUriAsync(SharpCryptoExchange.SocketApiClient,SharpCryptoExchange.Sockets.SocketConnection)">
            <summary>
            Get the url to reconnect to after losing a connection
            </summary>
            <param name="apiClient"></param>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.BaseSocketClient.GetSocketConnection(SharpCryptoExchange.SocketApiClient,System.String,System.Boolean)">
            <summary>
            Gets a connection for a new subscription or query. Can be an existing if there are open position or a new one.
            </summary>
            <param name="apiClient">The API client the connection is for</param>
            <param name="address">The address the socket is for</param>
            <param name="authenticated">Whether the socket should be authenticated</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.BaseSocketClient.HandleUnhandledMessage(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Process an unhandled message
            </summary>
            <param name="token">The token that wasn't processed</param>
        </member>
        <member name="M:SharpCryptoExchange.BaseSocketClient.ConnectSocketAsync(SharpCryptoExchange.Sockets.SocketConnection)">
            <summary>
            Connect a socket
            </summary>
            <param name="socketConnection">The socket to connect</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.BaseSocketClient.GetWebSocketParameters(System.String)">
            <summary>
            Get parameters for the websocket connection
            </summary>
            <param name="address">The address to connect to</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.BaseSocketClient.CreateSocket(System.String)">
            <summary>
            Create a socket for an address
            </summary>
            <param name="address">The address the socket should connect to</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.BaseSocketClient.SendPeriodic(System.String,System.TimeSpan,System.Func{SharpCryptoExchange.Sockets.SocketConnection,System.Object})">
            <summary>
            Periodically sends data over a socket connection
            </summary>
            <param name="identifier">Identifier for the periodic send</param>
            <param name="interval">How often</param>
            <param name="objGetter">Method returning the object to send</param>
        </member>
        <member name="M:SharpCryptoExchange.BaseSocketClient.UnsubscribeAsync(System.Int32)">
            <summary>
            Unsubscribe an update subscription
            </summary>
            <param name="subscriptionId">The id of the subscription to unsubscribe</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.BaseSocketClient.UnsubscribeAsync(SharpCryptoExchange.Sockets.UpdateSubscription)">
            <summary>
            Unsubscribe an update subscription
            </summary>
            <param name="subscription">The subscription to unsubscribe</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.BaseSocketClient.UnsubscribeAllAsync">
            <summary>
            Unsubscribe all subscriptions
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.BaseSocketClient.ReconnectAsync">
            <summary>
            Reconnect all connections
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.BaseSocketClient.GetSubscriptionsState">
            <summary>
            Log the current state of connections and subscriptions
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.BaseSocketClient.Dispose">
            <summary>
            Dispose the client
            </summary>
        </member>
        <member name="T:SharpCryptoExchange.RestApiClient">
            <summary>
            Base rest API client for interacting with a REST API
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.RestApiClient.GetTimeSyncInfo">
            <summary>
            Get time sync info for an API client
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.RestApiClient.GetTimeOffset">
            <summary>
            Get time offset for an API client
            </summary>
            <returns></returns>
        </member>
        <member name="P:SharpCryptoExchange.RestApiClient.TotalRequestsMade">
            <summary>
            Total amount of requests made with this API client
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.RestApiClient.Options">
            <summary>
            Options for this client
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.RestApiClient.RateLimiters">
            <summary>
            List of rate limiters
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.RestApiClient.#ctor(SharpCryptoExchange.Objects.BaseRestClientOptions,SharpCryptoExchange.Objects.RestApiClientOptions)">
            <summary>
            ctor
            </summary>
            <param name="options">The base client options</param>
            <param name="apiOptions">The Api client options</param>
        </member>
        <member name="M:SharpCryptoExchange.RestApiClient.GetServerTimestampAsync">
            <summary>
            Retrieve the server time for the purpose of syncing time between client and server to prevent authentication issues
            </summary>
            <returns>Server time</returns>
        </member>
        <member name="T:SharpCryptoExchange.SocketApiClient">
            <summary>
            Base socket API client for interaction with a websocket API
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.SocketApiClient.#ctor(SharpCryptoExchange.Objects.BaseClientOptions,SharpCryptoExchange.Objects.ApiClientOptions)">
            <summary>
            ctor
            </summary>
            <param name="options">The base client options</param>
            <param name="apiOptions">The Api client options</param>
        </member>
        <member name="T:SharpCryptoExchange.CommonObjects.Balance">
            <summary>
            Balance data
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Balance.Asset">
            <summary>
            The asset name
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Balance.Available">
            <summary>
            Quantity available
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Balance.Total">
            <summary>
            Total quantity
            </summary>
        </member>
        <member name="T:SharpCryptoExchange.CommonObjects.BaseCommonObject">
            <summary>
            Base class for common objects
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.BaseCommonObject.SourceObject">
            <summary>
            The source object the data is derived from
            </summary>
        </member>
        <member name="T:SharpCryptoExchange.CommonObjects.CommonOrderType">
            <summary>
            Order type
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.CommonObjects.CommonOrderType.Limit">
            <summary>
            Limit type
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.CommonObjects.CommonOrderType.Market">
            <summary>
            Market type
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.CommonObjects.CommonOrderType.Other">
            <summary>
            Other order type
            </summary>
        </member>
        <member name="T:SharpCryptoExchange.CommonObjects.CommonOrderSide">
            <summary>
            Order side
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.CommonObjects.CommonOrderSide.Buy">
            <summary>
            Buy order
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.CommonObjects.CommonOrderSide.Sell">
            <summary>
            Sell order
            </summary>
        </member>
        <member name="T:SharpCryptoExchange.CommonObjects.CommonOrderStatus">
            <summary>
            Order status
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.CommonObjects.CommonOrderStatus.Active">
            <summary>
            placed and not fully filled order
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.CommonObjects.CommonOrderStatus.Canceled">
            <summary>
            canceled order
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.CommonObjects.CommonOrderStatus.Filled">
            <summary>
            filled order
            </summary>
        </member>
        <member name="T:SharpCryptoExchange.CommonObjects.CommonPositionSide">
            <summary>
            Position side
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.CommonObjects.CommonPositionSide.Long">
            <summary>
            Long position
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.CommonObjects.CommonPositionSide.Short">
            <summary>
            Short position
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.CommonObjects.CommonPositionSide.Both">
            <summary>
            Both
            </summary>
        </member>
        <member name="T:SharpCryptoExchange.CommonObjects.Kline">
            <summary>
            Kline data
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Kline.OpenTime">
            <summary>
            Opening time of the kline
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Kline.OpenPrice">
            <summary>
            Price at the open time
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Kline.HighPrice">
            <summary>
            Highest price of the kline
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Kline.LowPrice">
            <summary>
            Lowest price of the kline
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Kline.ClosePrice">
            <summary>
            Close price of the kline
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Kline.Volume">
            <summary>
            Volume of the kline
            </summary>
        </member>
        <member name="T:SharpCryptoExchange.CommonObjects.Order">
            <summary>
            Order data
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Order.Id">
            <summary>
            Id of the order
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Order.Symbol">
            <summary>
            Symbol of the order
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Order.Price">
            <summary>
            Price of the order
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Order.Quantity">
            <summary>
            Quantity of the order
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Order.QuantityFilled">
            <summary>
            The quantity of the order which has been filled
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Order.Status">
            <summary>
            Status of the order
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Order.Side">
            <summary>
            Side of the order
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Order.Type">
            <summary>
            Type of the order
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Order.Timestamp">
            <summary>
            Order time
            </summary>
        </member>
        <member name="T:SharpCryptoExchange.CommonObjects.OrderBook">
            <summary>
            Order book data
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.OrderBook.Bids">
            <summary>
            List of bids
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.OrderBook.Asks">
            <summary>
            List of asks
            </summary>
        </member>
        <member name="T:SharpCryptoExchange.CommonObjects.OrderBookEntry">
            <summary>
            Order book entry
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.OrderBookEntry.Quantity">
            <summary>
            Quantity of the entry
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.OrderBookEntry.Price">
            <summary>
            Price of the entry
            </summary>
        </member>
        <member name="T:SharpCryptoExchange.CommonObjects.OrderId">
            <summary>
            Id of an order
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.OrderId.Id">
            <summary>
            Id of an order
            </summary>
        </member>
        <member name="T:SharpCryptoExchange.CommonObjects.Position">
            <summary>
            Position data
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Position.Id">
            <summary>
            Id of the position
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Position.Symbol">
            <summary>
            Symbol of the position
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Position.Leverage">
            <summary>
            Leverage
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Position.Quantity">
            <summary>
            Position quantity
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Position.EntryPrice">
            <summary>
            Entry price
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Position.LiquidationPrice">
            <summary>
            Liquidation price
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Position.UnrealizedPnl">
            <summary>
            Unrealized profit and loss
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Position.RealizedPnl">
            <summary>
            Realized profit and loss
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Position.MarkPrice">
            <summary>
            Mark price
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Position.AutoMargin">
            <summary>
            Auto adding margin
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Position.PositionMargin">
            <summary>
            Position margin
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Position.Side">
            <summary>
            Position side
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Position.Isolated">
            <summary>
            Is isolated
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Position.MaintananceMargin">
            <summary>
            Maintenance margin
            </summary>
        </member>
        <member name="T:SharpCryptoExchange.CommonObjects.Symbol">
            <summary>
            Symbol data
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Symbol.Name">
            <summary>
            Name of the symbol
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Symbol.MinTradeQuantity">
            <summary>
            Minimal quantity of an order
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Symbol.QuantityStep">
            <summary>
            Step with which the quantity should increase
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Symbol.PriceStep">
            <summary>
            step with which the price should increase
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Symbol.QuantityDecimals">
            <summary>
            The max amount of decimals for quantity
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Symbol.PriceDecimals">
            <summary>
            The max amount of decimal for price
            </summary>
        </member>
        <member name="T:SharpCryptoExchange.CommonObjects.Ticker">
            <summary>
            Ticker data
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Ticker.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Ticker.Price24H">
            <summary>
            Price 24 hours ago
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Ticker.LastPrice">
            <summary>
            Last trade price
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Ticker.LowPrice">
            <summary>
            24 hour low price
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Ticker.HighPrice">
            <summary>
            24 hour high price
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Ticker.Volume">
            <summary>
            24 hour volume
            </summary>
        </member>
        <member name="T:SharpCryptoExchange.CommonObjects.Trade">
            <summary>
            Trade data
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Trade.Symbol">
            <summary>
            Symbol of the trade
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Trade.Price">
            <summary>
            Price of the trade
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Trade.Quantity">
            <summary>
            Quantity of the trade
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.Trade.Timestamp">
            <summary>
            Timestamp of the trade
            </summary>
        </member>
        <member name="T:SharpCryptoExchange.CommonObjects.UserTrade">
            <summary>
            User trade info
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.UserTrade.Id">
            <summary>
            Id of the trade
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.UserTrade.OrderId">
            <summary>
            Order id of the trade
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.UserTrade.Fee">
            <summary>
            Fee of the trade
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.CommonObjects.UserTrade.FeeAsset">
            <summary>
            The asset the fee is paid in
            </summary>
        </member>
        <member name="T:SharpCryptoExchange.Converters.ArrayConverter">
            <summary>
            Converter for arrays to objects. Can deserialize data like [0.1, 0.2, "test"] to an object. Mapping is done by marking the class with [JsonConverter(typeof(ArrayConverter))] and the properties
            with [ArrayProperty(x)] where x is the index of the property in the array
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Converters.ArrayConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:SharpCryptoExchange.Converters.ArrayConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:SharpCryptoExchange.Converters.ArrayConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:SharpCryptoExchange.Converters.ArrayPropertyAttribute">
            <summary>
            Mark property as an index in the array
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Converters.ArrayPropertyAttribute.Index">
            <summary>
            The index in the array
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Converters.ArrayPropertyAttribute.#ctor(System.Int32)">
            <summary>
            ctor
            </summary>
            <param name="index"></param>
        </member>
        <member name="T:SharpCryptoExchange.Converters.BaseConverter`1">
            <summary>
            Base class for enum converters
            </summary>
            <typeparam name="T">Type of enum to convert</typeparam>
        </member>
        <member name="P:SharpCryptoExchange.Converters.BaseConverter`1.Mapping">
            <summary>
            The enum->string mapping
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Converters.BaseConverter`1.#ctor(System.Boolean)">
            <summary>
            ctor
            </summary>
            <param name="useQuotes"></param>
        </member>
        <member name="M:SharpCryptoExchange.Converters.BaseConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:SharpCryptoExchange.Converters.BaseConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:SharpCryptoExchange.Converters.BaseConverter`1.ReadString(System.String)">
            <summary>
            Convert a string value
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Converters.BaseConverter`1.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:SharpCryptoExchange.Converters.DateTimeConverter">
            <summary>
            Datetime converter. Supports converting from string/long/double to DateTime and back. Numbers are assumed to be the time since 1970-01-01.
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Converters.DateTimeConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:SharpCryptoExchange.Converters.DateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:SharpCryptoExchange.Converters.DateTimeConverter.ConvertFromSeconds(System.Double)">
            <summary>
            Convert a seconds since epoch (01-01-1970) value to DateTime
            </summary>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Converters.DateTimeConverter.ConvertFromMilliseconds(System.Double)">
            <summary>
            Convert a milliseconds since epoch (01-01-1970) value to DateTime
            </summary>
            <param name="milliseconds"></param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Converters.DateTimeConverter.ConvertFromMicroseconds(System.Int64)">
            <summary>
            Convert a microseconds since epoch (01-01-1970) value to DateTime
            </summary>
            <param name="microseconds"></param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Converters.DateTimeConverter.ConvertFromNanoseconds(System.Int64)">
            <summary>
            Convert a nanoseconds since epoch (01-01-1970) value to DateTime
            </summary>
            <param name="nanoseconds"></param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Converters.DateTimeConverter.ConvertToSeconds(System.Nullable{System.DateTime})">
            <summary>
            Convert a DateTime value to seconds since epoch (01-01-1970) value
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Converters.DateTimeConverter.ConvertToMilliseconds(System.Nullable{System.DateTime})">
            <summary>
            Convert a DateTime value to milliseconds since epoch (01-01-1970) value
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Converters.DateTimeConverter.ConvertToMicroseconds(System.Nullable{System.DateTime})">
            <summary>
            Convert a DateTime value to microseconds since epoch (01-01-1970) value
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Converters.DateTimeConverter.ConvertToNanoseconds(System.Nullable{System.DateTime})">
            <summary>
            Convert a DateTime value to nanoseconds since epoch (01-01-1970) value
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Converters.DateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:SharpCryptoExchange.Converters.EnumConverter">
            <summary>
            Converter for enum values. Enums entries should be noted with a MapAttribute to map the enum value to a string value
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Converters.EnumConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:SharpCryptoExchange.Converters.EnumConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:SharpCryptoExchange.Converters.EnumConverter.GetString``1(``0)">
            <summary>
            Get the string value for an enum value using the MapAttribute mapping. When multiple values are mapped for a enum entry the first value will be returned
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Converters.EnumConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:SharpCryptoExchange.ExchangeHelpers">
            <summary>
            General helpers functions
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.ExchangeHelpers.ClampValue(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Clamp a value between a min and max
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.ExchangeHelpers.AdjustValueStep(System.Decimal,System.Decimal,System.Nullable{System.Decimal},SharpCryptoExchange.Objects.RoundingType,System.Decimal)">
            <summary>
            Adjust a value to be between the min and max parameters and rounded to the closest step.
            </summary>
            <param name="min">The min value</param>
            <param name="max">The max value</param>
            <param name="step">The step size the value should be floored to. For example, value 2.548 with a step size of 0.01 will output 2.54</param>
            <param name="roundingType">How to round</param>
            <param name="value">The input value</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.ExchangeHelpers.AdjustValuePrecision(System.Decimal,System.Decimal,System.Nullable{System.Int32},SharpCryptoExchange.Objects.RoundingType,System.Decimal)">
            <summary>
            Adjust a value to be between the min and max parameters and rounded to the closest precision.
            </summary>
            <param name="min">The min value</param>
            <param name="max">The max value</param>
            <param name="precision">The precision the value should be rounded to. For example, value 2.554215 with a precision of 5 will output 2.5542</param>
            <param name="roundingType">How to round</param>
            <param name="value">The input value</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.ExchangeHelpers.RoundToSignificantDigits(System.Decimal,System.Int32,SharpCryptoExchange.Objects.RoundingType)">
            <summary>
            Round a value to have the provided total number of digits. For example, value 253.12332 with 5 digits would be 253.12 
            </summary>
            <param name="value">The value to round</param>
            <param name="digits">The total amount of digits (NOT decimal places) to round to</param>
            <param name="roundingType">How to round</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.ExchangeHelpers.RoundDown(System.Decimal,System.Double)">
            <summary>
            Rounds a value down to 
            </summary>
            <param name="i"></param>
            <param name="decimalPlaces"></param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.ExchangeHelpers.Normalize(System.Decimal)">
            <summary>
            Strips any trailing zero's of a decimal value, useful when converting the value to string.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:SharpCryptoExchange.ExtensionMethods">
            <summary>
            Helper methods
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.ExtensionMethods.AddParameter(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String)">
            <summary>
            Add a parameter
            </summary>
            <param name="parameters"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:SharpCryptoExchange.ExtensionMethods.AddParameter(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,Newtonsoft.Json.JsonConverter)">
            <summary>
            Add a parameter
            </summary>
            <param name="parameters"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="converter"></param>
        </member>
        <member name="M:SharpCryptoExchange.ExtensionMethods.AddParameter(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Object)">
            <summary>
            Add a parameter
            </summary>
            <param name="parameters"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:SharpCryptoExchange.ExtensionMethods.AddParameter(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Object,Newtonsoft.Json.JsonConverter)">
            <summary>
            Add a parameter
            </summary>
            <param name="parameters"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="converter"></param>
        </member>
        <member name="M:SharpCryptoExchange.ExtensionMethods.AddOptionalParameter(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Object)">
            <summary>
            Add an optional parameter. Not added if value is null
            </summary>
            <param name="parameters"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:SharpCryptoExchange.ExtensionMethods.AddOptionalParameter(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Object,Newtonsoft.Json.JsonConverter)">
            <summary>
            Add an optional parameter. Not added if value is null
            </summary>
            <param name="parameters"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="converter"></param>
        </member>
        <member name="M:SharpCryptoExchange.ExtensionMethods.AddOptionalParameter(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String)">
            <summary>
            Add an optional parameter. Not added if value is null
            </summary>
            <param name="parameters"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:SharpCryptoExchange.ExtensionMethods.AddOptionalParameter(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String,Newtonsoft.Json.JsonConverter)">
            <summary>
            Add an optional parameter. Not added if value is null
            </summary>
            <param name="parameters"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="converter"></param>
        </member>
        <member name="M:SharpCryptoExchange.ExtensionMethods.CreateParamString(System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,SharpCryptoExchange.Objects.ArrayParametersSerialization)">
            <summary>
            Create a query string of the specified parameters
            </summary>
            <param name="parameters">The parameters to use</param>
            <param name="urlEncodeValues">Whether or not the values should be url encoded</param>
            <param name="serializationType">How to serialize array parameters</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.ExtensionMethods.ToFormData(System.Collections.Generic.SortedDictionary{System.String,System.Object})">
            <summary>
            Convert a dictionary to formdata string
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.ExtensionMethods.GetString(System.Security.SecureString)">
            <summary>
            Get the string the secure string is representing
            </summary>
            <param name="source">The source secure string</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.ExtensionMethods.IsEqualTo(System.Security.SecureString,System.Security.SecureString)">
            <summary>
            Are 2 secure strings equal
            </summary>
            <param name="ss1">Source secure string</param>
            <param name="ss2">Compare secure string</param>
            <returns>True if equal by value</returns>
        </member>
        <member name="M:SharpCryptoExchange.ExtensionMethods.ToSecureString(System.String)">
            <summary>
            Create a secure string from a string
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.ExtensionMethods.ToJToken(System.String,SharpCryptoExchange.Logging.Log)">
            <summary>
            String to JToken
            </summary>
            <param name="stringData"></param>
            <param name="log"></param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.ExtensionMethods.ValidateIntValues(System.Int32,System.String,System.Int32[])">
            <summary>
            Validates an int is one of the allowed values
            </summary>
            <param name="value">Value of the int</param>
            <param name="argumentName">Name of the parameter</param>
            <param name="allowedValues">Allowed values</param>
        </member>
        <member name="M:SharpCryptoExchange.ExtensionMethods.ValidateIntBetween(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Validates an int is between two values
            </summary>
            <param name="value">The value of the int</param>
            <param name="argumentName">Name of the parameter</param>
            <param name="minValue">Min value</param>
            <param name="maxValue">Max value</param>
        </member>
        <member name="M:SharpCryptoExchange.ExtensionMethods.ValidateNotNull(System.String,System.String)">
            <summary>
            Validates a string is not null or empty
            </summary>
            <param name="value">The value of the string</param>
            <param name="argumentName">Name of the parameter</param>
        </member>
        <member name="M:SharpCryptoExchange.ExtensionMethods.ValidateNullOrNotEmpty(System.String,System.String)">
            <summary>
            Validates a string is null or not empty
            </summary>
            <param name="value"></param>
            <param name="argumentName"></param>
        </member>
        <member name="M:SharpCryptoExchange.ExtensionMethods.ValidateNotNull(System.Object,System.String)">
            <summary>
            Validates an object is not null
            </summary>
            <param name="value">The value of the object</param>
            <param name="argumentName">Name of the parameter</param>
        </member>
        <member name="M:SharpCryptoExchange.ExtensionMethods.ValidateNotNull``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Validates a list is not null or empty
            </summary>
            <param name="value">The value of the object</param>
            <param name="argumentName">Name of the parameter</param>
        </member>
        <member name="M:SharpCryptoExchange.ExtensionMethods.ToLogString(System.Exception)">
            <summary>
            Format an exception and inner exception to a readable string
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.ExtensionMethods.AppendPath(System.String,System.String[])">
            <summary>
            Append a base url with provided path
            </summary>
            <param name="url"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.ExtensionMethods.FillPathParameters(System.String,System.String[])">
            <summary>
            Fill parameters in a path. Parameters are specified by '{}' and should be specified in occuring sequence
            </summary>
            <param name="path">The total path string</param>
            <param name="values">The values to fill</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.ExtensionMethods.SetParameters(System.Uri,System.Collections.Generic.SortedDictionary{System.String,System.Object},SharpCryptoExchange.Objects.ArrayParametersSerialization)">
            <summary>
            Create a new uri with the provided parameters as query
            </summary>
            <param name="parameters"></param>
            <param name="baseUri"></param>
            <param name="arraySerialization"></param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.ExtensionMethods.SetParameters(System.Uri,System.Linq.IOrderedEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},SharpCryptoExchange.Objects.ArrayParametersSerialization)">
            <summary>
            Create a new uri with the provided parameters as query
            </summary>
            <param name="parameters"></param>
            <param name="baseUri"></param>
            <param name="arraySerialization"></param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.ExtensionMethods.AddQueryParmeter(System.Uri,System.String,System.String)">
            <summary>
            Add parameter to URI
            </summary>
            <param name="uri"></param>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:SharpCryptoExchange.Interfaces.CommonClients.IBaseRestClient">
            <summary>
            Common rest client endpoints
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Interfaces.CommonClients.IBaseRestClient.ExchangeName">
            <summary>
            The name of the exchange
            </summary>
        </member>
        <member name="E:SharpCryptoExchange.Interfaces.CommonClients.IBaseRestClient.OnOrderPlaced">
            <summary>
            Should be triggered on order placing
            </summary>
        </member>
        <member name="E:SharpCryptoExchange.Interfaces.CommonClients.IBaseRestClient.OnOrderCanceled">
            <summary>
            Should be triggered on order cancelling
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Interfaces.CommonClients.IBaseRestClient.GetSymbolName(System.String,System.String)">
            <summary>
            Get the symbol name based on a base and quote asset
            </summary>
            <param name="baseAsset">The base asset</param>
            <param name="quoteAsset">The quote asset</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Interfaces.CommonClients.IBaseRestClient.GetSymbolsAsync(System.Threading.CancellationToken)">
            <summary>
            Get a list of symbols for the exchange
            </summary>
            <param name="ct">[Optional] Cancellation token for cancelling the request</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Interfaces.CommonClients.IBaseRestClient.GetTickerAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get a ticker for the exchange
            </summary>
            <param name="symbol">The symbol to get klines for</param>
            <param name="ct">[Optional] Cancellation token for cancelling the request</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Interfaces.CommonClients.IBaseRestClient.GetTickersAsync(System.Threading.CancellationToken)">
            <summary>
            Get a list of tickers for the exchange
            </summary>
            <param name="ct">[Optional] Cancellation token for cancelling the request</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Interfaces.CommonClients.IBaseRestClient.GetKlinesAsync(System.String,System.TimeSpan,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get a list of candles for a given symbol on the exchange
            </summary>
            <param name="symbol">The symbol to retrieve the candles for</param>
            <param name="timespan">The timespan to retrieve the candles for. The supported value are dependent on the exchange</param>
            <param name="startTime">[Optional] Start time to retrieve klines for</param>
            <param name="endTime">[Optional] End time to retrieve klines for</param>
            <param name="limit">[Optional] Max number of results</param>
            <param name="ct">[Optional] Cancellation token for cancelling the request</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Interfaces.CommonClients.IBaseRestClient.GetOrderBookAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the order book for a symbol
            </summary>
            <param name="symbol">The symbol to get the book for</param>
            <param name="ct">[Optional] Cancellation token for cancelling the request</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Interfaces.CommonClients.IBaseRestClient.GetRecentTradesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            The recent trades for a symbol
            </summary>
            <param name="symbol">The symbol to get the trades for</param>
            <param name="ct">[Optional] Cancellation token for cancelling the request</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Interfaces.CommonClients.IBaseRestClient.GetBalancesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get balances
            </summary>
            <param name="accountId">[Optional] The account id to retrieve balances for, required for some exchanges, ignored otherwise</param>
            <param name="ct">[Optional] Cancellation token for cancelling the request</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Interfaces.CommonClients.IBaseRestClient.GetOrderAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get an order by id
            </summary>
            <param name="orderId">The id</param>
            <param name="symbol">[Optional] The symbol the order is on, required for some exchanges, ignored otherwise</param>
            <param name="ct">[Optional] Cancellation token for cancelling the request</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Interfaces.CommonClients.IBaseRestClient.GetOrderTradesAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get trades for an order by id
            </summary>
            <param name="orderId">The id</param>
            <param name="symbol">[Optional] The symbol the order is on, required for some exchanges, ignored otherwise</param>
            <param name="ct">[Optional] Cancellation token for cancelling the request</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Interfaces.CommonClients.IBaseRestClient.GetOpenOrdersAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get a list of open orders
            </summary>
            <param name="symbol">[Optional] The symbol to get open orders for, required for some exchanges, ignored otherwise</param>
            <param name="ct">[Optional] Cancellation token for cancelling the request</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Interfaces.CommonClients.IBaseRestClient.GetClosedOrdersAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get a list of closed orders
            </summary>
            <param name="symbol">[Optional] The symbol to get closed orders for, required for some exchanges, ignored otherwise</param>
            <param name="ct">[Optional] Cancellation token for cancelling the request</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Interfaces.CommonClients.IBaseRestClient.CancelOrderAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Cancel an order by id
            </summary>
            <param name="orderId">The id</param>
            <param name="symbol">[Optional] The symbol the order is on, required for some exchanges, ignored otherwise</param>
            <param name="ct">[Optional] Cancellation token for cancelling the request</param>
            <returns></returns>
        </member>
        <member name="T:SharpCryptoExchange.Interfaces.CommonClients.IFuturesClient">
            <summary>
            Common futures endpoints
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Interfaces.CommonClients.IFuturesClient.PlaceOrderAsync(System.String,SharpCryptoExchange.CommonObjects.CommonOrderSide,SharpCryptoExchange.CommonObjects.CommonOrderType,System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Int32},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Place an order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The side of the order</param>
            <param name="type">The type of the order</param>
            <param name="quantity">The quantity of the order</param>
            <param name="price">The price of the order, only for limit orders</param>
            <param name="accountId">[Optional] The account id to place the order on, required for some exchanges, ignored otherwise</param>
            <param name="leverage">[Optional] Leverage for this order. This is needed for some exchanges. For exchanges where this is not needed this parameter is ignored (and should be set before hand)</param>
            <param name="clientOrderId">[Optional] Client specified id for this order</param>
            <param name="ct">[Optional] Cancellation token for cancelling the request</param>
            <returns>The id of the resulting order</returns>
        </member>
        <member name="M:SharpCryptoExchange.Interfaces.CommonClients.IFuturesClient.GetPositionsAsync(System.Threading.CancellationToken)">
            <summary>
            Get position
            </summary>
            <param name="ct">[Optional] Cancellation token for cancelling the request</param>
            <returns></returns>
        </member>
        <member name="T:SharpCryptoExchange.Interfaces.CommonClients.ISpotClient">
            <summary>
            Common spot endpoints
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Interfaces.CommonClients.ISpotClient.PlaceOrderAsync(System.String,SharpCryptoExchange.CommonObjects.CommonOrderSide,SharpCryptoExchange.CommonObjects.CommonOrderType,System.Decimal,System.Nullable{System.Decimal},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Place an order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The side of the order</param>
            <param name="type">The type of the order</param>
            <param name="quantity">The quantity of the order</param>
            <param name="price">The price of the order, only for limit orders</param>
            <param name="accountId">[Optional] The account id to place the order on, required for some exchanges, ignored otherwise</param>
            <param name="clientOrderId">[Optional] Client specified id for this order</param>
            <param name="ct">[Optional] Cancellation token for cancelling the request</param>
            <returns>The id of the resulting order</returns>
        </member>
        <member name="T:SharpCryptoExchange.Interfaces.INonceProvider">
            <summary>
            A provider for a nonce value used when signing requests
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Interfaces.INonceProvider.GetNonce">
            <summary>
            Get nonce value. Nonce value should be unique and incremental for each call
            </summary>
            <returns>Nonce value</returns>
        </member>
        <member name="T:SharpCryptoExchange.Interfaces.IRateLimiter">
            <summary>
            Rate limiter interface
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Interfaces.IRateLimiter.LimitRequestAsync(SharpCryptoExchange.Logging.Log,System.String,System.Net.Http.HttpMethod,System.Boolean,System.Security.SecureString,SharpCryptoExchange.Objects.RateLimitingBehaviour,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Limit a request based on previous requests made
            </summary>
            <param name="log">The logger</param>
            <param name="endpoint">The endpoint the request is for</param>
            <param name="method">The Http request method</param>
            <param name="signed">Whether the request is singed(private) or not</param>
            <param name="apiKey">The api key making this request</param>
            <param name="limitBehaviour">The limit behavior for when the limit is reached</param>
            <param name="requestWeight">The weight of the request</param>
            <param name="ct">Cancellation token to cancel waiting</param>
            <returns>The time in milliseconds spend waiting</returns>
        </member>
        <member name="T:SharpCryptoExchange.Interfaces.IRequest">
            <summary>
            Request interface
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Interfaces.IRequest.Accept">
            <summary>
            Accept header
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Interfaces.IRequest.Content">
            <summary>
            Content
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Interfaces.IRequest.Method">
            <summary>
            Method
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Interfaces.IRequest.Uri">
            <summary>
            Uri
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Interfaces.IRequest.RequestId">
            <summary>
            internal request id for tracing
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Interfaces.IRequest.SetContent(System.Byte[])">
            <summary>
            Set byte content
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:SharpCryptoExchange.Interfaces.IRequest.SetContent(System.String,System.String)">
            <summary>
            Set string content
            </summary>
            <param name="data"></param>
            <param name="contentType"></param>
        </member>
        <member name="M:SharpCryptoExchange.Interfaces.IRequest.AddHeader(System.String,System.String)">
            <summary>
            Add a header to the request
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:SharpCryptoExchange.Interfaces.IRequest.GetHeaders">
            <summary>
            Get all headers
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Interfaces.IRequest.GetResponseAsync(System.Threading.CancellationToken)">
            <summary>
            Get the response
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SharpCryptoExchange.Interfaces.IRequestFactory">
            <summary>
            Request factory interface
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Interfaces.IRequestFactory.Create(System.Net.Http.HttpMethod,System.Uri,System.Int32)">
            <summary>
            Create a request for an uri
            </summary>
            <param name="method"></param>
            <param name="uri"></param>
            <param name="requestId"></param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Interfaces.IRequestFactory.Configure(System.TimeSpan,SharpCryptoExchange.Objects.ApiProxy,System.Net.Http.HttpClient)">
            <summary>
            Configure the requests created by this factory
            </summary>
            <param name="requestTimeout">Request timeout to use</param>
            <param name="proxy">Proxy settings to use</param>       
            <param name="httpClient">Optional shared http client instance</param>
        </member>
        <member name="T:SharpCryptoExchange.Interfaces.IResponse">
            <summary>
            Response object interface
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Interfaces.IResponse.StatusCode">
            <summary>
            The response status code
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Interfaces.IResponse.IsSuccessStatusCode">
            <summary>
            Whether the status code indicates a success status
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Interfaces.IResponse.ResponseHeaders">
            <summary>
            The response headers
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Interfaces.IResponse.GetResponseStreamAsync">
            <summary>
            Get the response stream
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Interfaces.IResponse.Close">
            <summary>
            Close the response
            </summary>
        </member>
        <member name="T:SharpCryptoExchange.Interfaces.IRestClient">
            <summary>
            Base class for rest API implementations
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Interfaces.IRestClient.RequestFactory">
            <summary>
            The factory for creating requests. Used for unit testing
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Interfaces.IRestClient.TotalRequestsMade">
            <summary>
            The total amount of requests made with this client
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Interfaces.IRestClient.ClientOptions">
            <summary>
            The options provided for this client
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Interfaces.IRestClient.SetApiCredentials(SharpCryptoExchange.Authentication.ApiCredentials)">
            <summary>
            Set the API credentials for this client. All Api clients in this client will use the new credentials, regardless of earlier set options.
            </summary>
            <param name="credentials">The credentials to set</param>
        </member>
        <member name="T:SharpCryptoExchange.Interfaces.ISocketClient">
            <summary>
            Base class for socket API implementations
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Interfaces.ISocketClient.ClientOptions">
            <summary>
            The options provided for this client
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Interfaces.ISocketClient.SetApiCredentials(SharpCryptoExchange.Authentication.ApiCredentials)">
            <summary>
            Set the API credentials for this client. All Api clients in this client will use the new credentials, regardless of earlier set options.
            </summary>
            <param name="credentials">The credentials to set</param>
        </member>
        <member name="P:SharpCryptoExchange.Interfaces.ISocketClient.IncomingKbps">
            <summary>
            Incoming kilobytes per second of data
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Interfaces.ISocketClient.CurrentConnections">
            <summary>
            The current amount of connections to the API from this client. A connection can have multiple subscriptions.
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Interfaces.ISocketClient.CurrentSubscriptions">
            <summary>
            The current amount of subscriptions running from the client
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Interfaces.ISocketClient.UnsubscribeAsync(System.Int32)">
            <summary>
            Unsubscribe from a stream using the subscription id received when starting the subscription
            </summary>
            <param name="subscriptionId">The id of the subscription to unsubscribe</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Interfaces.ISocketClient.UnsubscribeAsync(SharpCryptoExchange.Sockets.UpdateSubscription)">
            <summary>
            Unsubscribe from a stream
            </summary>
            <param name="subscription">The subscription to unsubscribe</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Interfaces.ISocketClient.UnsubscribeAllAsync">
            <summary>
            Unsubscribe all subscriptions
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharpCryptoExchange.Interfaces.ISymbolOrderBook">
            <summary>
            Interface for order book
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Interfaces.ISymbolOrderBook.Id">
            <summary>
            Identifier
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Interfaces.ISymbolOrderBook.Status">
            <summary>
            The status of the order book. Order book is up to date when the status is `Synced`
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Interfaces.ISymbolOrderBook.LastSequenceNumber">
            <summary>
            Last update identifier
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Interfaces.ISymbolOrderBook.Symbol">
            <summary>
            The symbol of the order book
            </summary>
        </member>
        <member name="E:SharpCryptoExchange.Interfaces.ISymbolOrderBook.OnStatusChange">
            <summary>
            Event when the state changes
            </summary>
        </member>
        <member name="E:SharpCryptoExchange.Interfaces.ISymbolOrderBook.OnOrderBookUpdate">
            <summary>
            Event when order book was updated. Be careful! It can generate a lot of events at high-liquidity markets
            </summary>    
        </member>
        <member name="E:SharpCryptoExchange.Interfaces.ISymbolOrderBook.OnBestOffersChanged">
            <summary>
            Event when the BestBid or BestAsk changes ie a Pricing Tick
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Interfaces.ISymbolOrderBook.UpdateTime">
            <summary>
            Timestamp of the last update
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Interfaces.ISymbolOrderBook.AskCount">
            <summary>
            The number of asks in the book
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Interfaces.ISymbolOrderBook.BidCount">
            <summary>
            The number of bids in the book
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Interfaces.ISymbolOrderBook.Book">
            <summary>
            Get a snapshot of the book at this moment
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Interfaces.ISymbolOrderBook.Asks">
            <summary>
            The list of asks
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Interfaces.ISymbolOrderBook.Bids">
            <summary>
            The list of bids
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Interfaces.ISymbolOrderBook.BestBid">
            <summary>
            The best bid currently in the order book
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Interfaces.ISymbolOrderBook.BestAsk">
            <summary>
            The best ask currently in the order book
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Interfaces.ISymbolOrderBook.BestOffers">
            <summary>
            BestBid/BesAsk returned as a pair
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Interfaces.ISymbolOrderBook.StartAsync(System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Start connecting and synchronizing the order book
            </summary>
            <param name="ct">A cancellation token to stop the order book when canceled</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Interfaces.ISymbolOrderBook.StopAsync">
            <summary>
            Stop syncing the order book
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Interfaces.ISymbolOrderBook.CalculateAverageFillPrice(System.Decimal,SharpCryptoExchange.Objects.OrderBookEntryType)">
            <summary>
            Get the average price that a market order would fill at at the current order book state. This is no guarentee that an order of that quantity would actually be filled
            at that price since between this calculation and the order placement the book can have changed.
            </summary>
            <param name="quantity">The quantity in base asset to fill</param>
            <param name="type">The type</param>
            <returns>Average fill price</returns>
        </member>
        <member name="M:SharpCryptoExchange.Interfaces.ISymbolOrderBook.ToString(System.Int32)">
            <summary>
            String representation of the top x entries
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharpCryptoExchange.Interfaces.ISymbolOrderBookEntry">
            <summary>
            Interface for order book entries
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Interfaces.ISymbolOrderBookEntry.Quantity">
            <summary>
            The quantity of the entry
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Interfaces.ISymbolOrderBookEntry.Price">
            <summary>
            The price of the entry
            </summary>
        </member>
        <member name="T:SharpCryptoExchange.Interfaces.ISymbolOrderSequencedBookEntry">
            <summary>
            Interface for order book entries
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Interfaces.ISymbolOrderSequencedBookEntry.Sequence">
            <summary>
            Sequence of the update
            </summary>
        </member>
        <member name="T:SharpCryptoExchange.Interfaces.IWebsocket">
            <summary>
            Webscoket connection interface
            </summary>
        </member>
        <member name="E:SharpCryptoExchange.Interfaces.IWebsocket.OnClose">
            <summary>
            Websocket closed event
            </summary>
        </member>
        <member name="E:SharpCryptoExchange.Interfaces.IWebsocket.OnMessage">
            <summary>
            Websocket message received event
            </summary>
        </member>
        <member name="E:SharpCryptoExchange.Interfaces.IWebsocket.OnError">
            <summary>
            Websocket error event
            </summary>
        </member>
        <member name="E:SharpCryptoExchange.Interfaces.IWebsocket.OnOpen">
            <summary>
            Websocket opened event
            </summary>
        </member>
        <member name="E:SharpCryptoExchange.Interfaces.IWebsocket.OnReconnecting">
            <summary>
            Websocket has lost connection to the server and is attempting to reconnect
            </summary>
        </member>
        <member name="E:SharpCryptoExchange.Interfaces.IWebsocket.OnReconnected">
            <summary>
            Websocket has reconnected to the server
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Interfaces.IWebsocket.GetReconnectionUrl">
            <summary>
            Get reconntion url
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Interfaces.IWebsocket.Id">
            <summary>
            Unique id for this socket
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Interfaces.IWebsocket.IncomingKbps">
            <summary>
            The current kilobytes per second of data being received, averaged over the last 3 seconds
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Interfaces.IWebsocket.Uri">
            <summary>
            The uri the socket connects to
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Interfaces.IWebsocket.IsClosed">
            <summary>
            Whether the socket connection is closed
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Interfaces.IWebsocket.IsOpen">
            <summary>
            Whether the socket connection is open
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Interfaces.IWebsocket.ConnectAsync">
            <summary>
            Connect the socket
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Interfaces.IWebsocket.Send(System.String)">
            <summary>
            Send data
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:SharpCryptoExchange.Interfaces.IWebsocket.ReconnectAsync">
            <summary>
            Reconnect the socket
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Interfaces.IWebsocket.CloseAsync">
            <summary>
            Close the connection
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharpCryptoExchange.Interfaces.IWebsocketFactory">
            <summary>
            Websocket factory interface
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Interfaces.IWebsocketFactory.CreateWebsocket(SharpCryptoExchange.Logging.Log,SharpCryptoExchange.Sockets.WebSocketParameters)">
            <summary>
            Create a websocket for an url
            </summary>
            <param name="log">The logger</param>
            <param name="parameters">The parameters to use for the connection</param>
            <returns></returns>
        </member>
        <member name="T:SharpCryptoExchange.Logging.ConsoleLogger">
            <summary>
            ILogger implementation for logging to the console
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Logging.ConsoleLogger.BeginScope``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:SharpCryptoExchange.Logging.ConsoleLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <inheritdoc />
        </member>
        <member name="M:SharpCryptoExchange.Logging.ConsoleLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <inheritdoc />
        </member>
        <member name="T:SharpCryptoExchange.Logging.DebugLogger">
            <summary>
            Default log writer, uses Trace.WriteLine
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Logging.DebugLogger.BeginScope``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:SharpCryptoExchange.Logging.DebugLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <inheritdoc />
        </member>
        <member name="M:SharpCryptoExchange.Logging.DebugLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <inheritdoc />
        </member>
        <member name="T:SharpCryptoExchange.Logging.Log">
            <summary>
            Log implementation
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.Logging.Log.writers">
            <summary>
            List of ILogger implementations to forward the message to
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Logging.Log.Level">
            <summary>
            The verbosity of the logging, anything more verbose will not be forwarded to the writers
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Logging.Log.ClientName">
            <summary>
            Client name
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Logging.Log.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="clientName">The name of the client the logging is used in</param>
        </member>
        <member name="M:SharpCryptoExchange.Logging.Log.UpdateWriters(System.Collections.Generic.List{Microsoft.Extensions.Logging.ILogger})">
            <summary>
            Set the writers
            </summary>
            <param name="textWriters"></param>
        </member>
        <member name="M:SharpCryptoExchange.Logging.Log.Write(Microsoft.Extensions.Logging.LogLevel,System.String)">
            <summary>
            Write a log entry
            </summary>
            <param name="logLevel">The verbosity of the message</param>
            <param name="message">The message to log</param>
        </member>
        <member name="T:SharpCryptoExchange.Objects.ApiProxy">
            <summary>
            Proxy info
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.ApiProxy.Host">
            <summary>
            The host address of the proxy
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.ApiProxy.Port">
            <summary>
            The port of the proxy
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.ApiProxy.Login">
            <summary>
            The login of the proxy
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.ApiProxy.Password">
            <summary>
            The password of the proxy
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Objects.ApiProxy.#ctor(System.String,System.Int32)">
            <summary>
            Create new settings for a proxy
            </summary>
            <param name="host">The proxy hostname/ip</param>
            <param name="port">The proxy port</param>
        </member>
        <member name="M:SharpCryptoExchange.Objects.ApiProxy.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Create new settings for a proxy
            </summary>
            <param name="host">The proxy hostname/ip</param>
            <param name="port">The proxy port</param>
            <param name="login">The proxy login</param>
            <param name="password">The proxy password</param>
        </member>
        <member name="M:SharpCryptoExchange.Objects.ApiProxy.#ctor(System.String,System.Int32,System.String,System.Security.SecureString)">
            <summary>
            Create new settings for a proxy
            </summary>
            <param name="host">The proxy hostname/ip</param>
            <param name="port">The proxy port</param>
            <param name="login">The proxy login</param>
            <param name="password">The proxy password</param>
        </member>
        <member name="T:SharpCryptoExchange.Objects.AsyncResetEvent">
            <summary>
            Async auto reset based on Stephen Toub`s implementation
            https://devblogs.microsoft.com/pfxteam/building-async-coordination-primitives-part-2-asyncautoresetevent/
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Objects.AsyncResetEvent.#ctor(System.Boolean,System.Boolean)">
            <summary>
            New AsyncResetEvent
            </summary>
            <param name="initialState"></param>
            <param name="reset"></param>
        </member>
        <member name="M:SharpCryptoExchange.Objects.AsyncResetEvent.WaitAsync(System.Nullable{System.TimeSpan})">
            <summary>
            Wait for the AutoResetEvent to be set
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Objects.AsyncResetEvent.Set">
            <summary>
            Signal a waiter
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Objects.AsyncResetEvent.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:SharpCryptoExchange.Objects.ByteOrderComparer">
            <summary>
            Comparer for byte order
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Objects.ByteOrderComparer.Compare(System.Byte[],System.Byte[])">
            <summary>
            Compare function
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:SharpCryptoExchange.Objects.CallResult">
            <summary>
            The result of an operation
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.CallResult.Error">
            <summary>
            An error if the call didn't succeed, will always be filled if Success = false
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.CallResult.Success">
            <summary>
            Whether the call was successful
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Objects.CallResult.#ctor(SharpCryptoExchange.Objects.Error)">
            <summary>
            ctor
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:SharpCryptoExchange.Objects.CallResult.op_Implicit(SharpCryptoExchange.Objects.CallResult)~System.Boolean">
            <summary>
            Overwrite bool check so we can use if(callResult) instead of if(callResult.Success)
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:SharpCryptoExchange.Objects.CallResult`1">
            <summary>
            The result of an operation
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:SharpCryptoExchange.Objects.CallResult`1.Data">
            <summary>
            The data returned by the call, only available when Success = true
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.CallResult`1.OriginalData">
            <summary>
            The original data returned by the call, only available when `OutputOriginalData` is set to `true` in the client options
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Objects.CallResult`1.#ctor(`0,System.String,SharpCryptoExchange.Objects.Error)">
            <summary>
            ctor
            </summary>
            <param name="data"></param>
            <param name="originalData"></param>
            <param name="error"></param>
        </member>
        <member name="M:SharpCryptoExchange.Objects.CallResult`1.#ctor(`0)">
            <summary>
            Create a new data result
            </summary>
            <param name="data">The data to return</param>
        </member>
        <member name="M:SharpCryptoExchange.Objects.CallResult`1.#ctor(SharpCryptoExchange.Objects.Error)">
            <summary>
            Create a new error result
            </summary>
            <param name="error">The erro rto return</param>
        </member>
        <member name="M:SharpCryptoExchange.Objects.CallResult`1.op_Implicit(SharpCryptoExchange.Objects.CallResult{`0})~System.Boolean">
            <summary>
            Overwrite bool check so we can use if(callResult) instead of if(callResult.Success)
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:SharpCryptoExchange.Objects.CallResult`1.GetResultOrError(`0@,SharpCryptoExchange.Objects.Error@)">
            <summary>
            Whether the call was successful or not. Useful for nullability checking.
            </summary>
            <param name="data">The data returned by the call.</param>
            <param name="error"><see cref="T:SharpCryptoExchange.Objects.Error"/> on failure.</param>
            <returns><c>true</c> when <see cref="T:SharpCryptoExchange.Objects.CallResult`1"/> succeeded, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SharpCryptoExchange.Objects.CallResult`1.As``1(``0)">
            <summary>
            Copy the WebCallResult to a new data type
            </summary>
            <typeparam name="K">The new type</typeparam>
            <param name="data">The data of the new type</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Objects.CallResult`1.AsError``1(SharpCryptoExchange.Objects.Error)">
            <summary>
            Copy the WebCallResult to a new data type
            </summary>
            <typeparam name="K">The new type</typeparam>
            <param name="error">The error to return</param>
            <returns></returns>
        </member>
        <member name="T:SharpCryptoExchange.Objects.WebCallResult">
            <summary>
            The result of a request
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.WebCallResult.RequestMethod">
            <summary>
            The request http method
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.WebCallResult.RequestHeaders">
            <summary>
            The headers sent with the request
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.WebCallResult.RequestUrl">
            <summary>
            The url which was requested
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.WebCallResult.RequestBody">
            <summary>
            The body of the request
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.WebCallResult.ResponseStatusCode">
            <summary>
            The status code of the response. Note that a OK status does not always indicate success, check the Success parameter for this.
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.WebCallResult.ResponseHeaders">
            <summary>
            The response headers
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.WebCallResult.ResponseTime">
            <summary>
            The time between sending the request and receiving the response
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Objects.WebCallResult.#ctor(System.Nullable{System.Net.HttpStatusCode},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IEnumerable{System.String}}},System.Nullable{System.TimeSpan},System.String,System.String,System.Net.Http.HttpMethod,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IEnumerable{System.String}}},SharpCryptoExchange.Objects.Error)">
            <summary>
            ctor
            </summary>
            <param name="code"></param>
            <param name="responseHeaders"></param>
            <param name="responseTime"></param>
            <param name="requestUrl"></param>
            <param name="requestBody"></param>
            <param name="requestMethod"></param>
            <param name="requestHeaders"></param>
            <param name="error"></param>
        </member>
        <member name="M:SharpCryptoExchange.Objects.WebCallResult.#ctor(SharpCryptoExchange.Objects.Error)">
            <summary>
            ctor
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:SharpCryptoExchange.Objects.WebCallResult.AsError(SharpCryptoExchange.Objects.Error)">
            <summary>
            Return the result as an error result
            </summary>
            <param name="error">The error returned</param>
            <returns></returns>
        </member>
        <member name="T:SharpCryptoExchange.Objects.WebCallResult`1">
            <summary>
            The result of a request
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:SharpCryptoExchange.Objects.WebCallResult`1.RequestMethod">
            <summary>
            The request http method
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.WebCallResult`1.RequestHeaders">
            <summary>
            The headers sent with the request
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.WebCallResult`1.RequestUrl">
            <summary>
            The url which was requested
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.WebCallResult`1.RequestBody">
            <summary>
            The body of the request
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.WebCallResult`1.ResponseStatusCode">
            <summary>
            The status code of the response. Note that a OK status does not always indicate success, check the Success parameter for this.
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.WebCallResult`1.ResponseHeaders">
            <summary>
            The response headers
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.WebCallResult`1.ResponseTime">
            <summary>
            The time between sending the request and receiving the response
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Objects.WebCallResult`1.#ctor(System.Nullable{System.Net.HttpStatusCode},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IEnumerable{System.String}}},System.Nullable{System.TimeSpan},System.String,System.String,System.String,System.Net.Http.HttpMethod,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IEnumerable{System.String}}},`0,SharpCryptoExchange.Objects.Error)">
            <summary>
            Create a new result
            </summary>
            <param name="code"></param>
            <param name="responseHeaders"></param>
            <param name="responseTime"></param>
            <param name="originalData"></param>
            <param name="requestUrl"></param>
            <param name="requestBody"></param>
            <param name="requestMethod"></param>
            <param name="requestHeaders"></param>
            <param name="data"></param>
            <param name="error"></param>
        </member>
        <member name="M:SharpCryptoExchange.Objects.WebCallResult`1.#ctor(SharpCryptoExchange.Objects.Error)">
            <summary>
            Create a new error result
            </summary>
            <param name="error">The error</param>
        </member>
        <member name="M:SharpCryptoExchange.Objects.WebCallResult`1.As``1(``0)">
            <summary>
            Copy the WebCallResult to a new data type
            </summary>
            <typeparam name="K">The new type</typeparam>
            <param name="data">The data of the new type</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Objects.WebCallResult`1.AsDataless">
            <summary>
            Copy as a dataless result
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Objects.WebCallResult`1.AsDatalessError(SharpCryptoExchange.Objects.Error)">
            <summary>
            Copy as a dataless result
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Objects.WebCallResult`1.AsError``1(SharpCryptoExchange.Objects.Error)">
            <summary>
            Copy the WebCallResult to a new data type
            </summary>
            <typeparam name="K">The new type</typeparam>
            <param name="error">The error returned</param>
            <returns></returns>
        </member>
        <member name="T:SharpCryptoExchange.Objects.Constants">
            <summary>
            Constants
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.Objects.Constants.JsonContentHeader">
            <summary>
            Json content type header
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.Objects.Constants.FormContentHeader">
            <summary>
            Form content type header
            </summary>
        </member>
        <member name="T:SharpCryptoExchange.Objects.RateLimitingBehaviour">
            <summary>
            What to do when a request would exceed the rate limit
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.Objects.RateLimitingBehaviour.Fail">
            <summary>
            Fail the request
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.Objects.RateLimitingBehaviour.Wait">
            <summary>
            Wait till the request can be send
            </summary>
        </member>
        <member name="T:SharpCryptoExchange.Objects.HttpMethodParameterPosition">
            <summary>
            Where the parameters for a HttpMethod should be added in a request
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.Objects.HttpMethodParameterPosition.InBody">
            <summary>
            Parameters in body
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.Objects.HttpMethodParameterPosition.InUri">
            <summary>
            Parameters in url
            </summary>
        </member>
        <member name="T:SharpCryptoExchange.Objects.RequestBodyFormat">
            <summary>
            The format of the request body
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.Objects.RequestBodyFormat.FormData">
            <summary>
            Form data
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.Objects.RequestBodyFormat.Json">
            <summary>
            Json
            </summary>
        </member>
        <member name="T:SharpCryptoExchange.Objects.OrderBookStatus">
            <summary>
            Status of the order book
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.Objects.OrderBookStatus.Disconnected">
            <summary>
            Not connected
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.Objects.OrderBookStatus.Connecting">
            <summary>
            Connecting
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.Objects.OrderBookStatus.Reconnecting">
            <summary>
            Reconnecting
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.Objects.OrderBookStatus.Syncing">
            <summary>
            Syncing data
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.Objects.OrderBookStatus.Synced">
            <summary>
            Data synced, order book is up to date
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.Objects.OrderBookStatus.Disposing">
            <summary>
            Disposing
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.Objects.OrderBookStatus.Disposed">
            <summary>
            Disposed
            </summary>
        </member>
        <member name="T:SharpCryptoExchange.Objects.OrderBookEntryType">
            <summary>
            Order book entry type
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.Objects.OrderBookEntryType.Ask">
            <summary>
            Ask
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.Objects.OrderBookEntryType.Bid">
            <summary>
            Bid
            </summary>
        </member>
        <member name="T:SharpCryptoExchange.Objects.ArrayParametersSerialization">
            <summary>
            Define how array parameters should be send
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.Objects.ArrayParametersSerialization.MultipleValues">
            <summary>
            Send multiple key=value for each entry
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.Objects.ArrayParametersSerialization.Array">
            <summary>
            Create an []=value array
            </summary>
        </member>
        <member name="T:SharpCryptoExchange.Objects.RoundingType">
            <summary>
            How to round
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.Objects.RoundingType.Down">
            <summary>
            Round down (flooring)
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.Objects.RoundingType.Closest">
            <summary>
            Round to closest value
            </summary>
        </member>
        <member name="T:SharpCryptoExchange.Objects.Error">
            <summary>
            Base class for errors
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.Error.Code">
            <summary>
            The error code from the server
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.Error.Message">
            <summary>
            The message for the error that occurred
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.Error.Data">
            <summary>
            The data which caused the error
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Objects.Error.#ctor(System.Nullable{System.Int32},System.String,System.Object)">
            <summary>
            ctor
            </summary>
            <param name="code"></param>
            <param name="message"></param>
            <param name="data"></param>
        </member>
        <member name="M:SharpCryptoExchange.Objects.Error.ToString">
            <summary>
            String representation
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharpCryptoExchange.Objects.CantConnectError">
            <summary>
            Cant reach server error
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Objects.CantConnectError.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="T:SharpCryptoExchange.Objects.NoApiCredentialsError">
            <summary>
            No api credentials provided while trying to access a private endpoint
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Objects.NoApiCredentialsError.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="T:SharpCryptoExchange.Objects.ServerError">
            <summary>
            Error returned by the server
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Objects.ServerError.#ctor(System.String,System.Object)">
            <summary>
            ctor
            </summary>
            <param name="message"></param>
            <param name="data"></param>
        </member>
        <member name="M:SharpCryptoExchange.Objects.ServerError.#ctor(System.Int32,System.String,System.Object)">
            <summary>
            ctor
            </summary>
            <param name="code"></param>
            <param name="message"></param>
            <param name="data"></param>
        </member>
        <member name="T:SharpCryptoExchange.Objects.WebError">
            <summary>
            Web error returned by the server
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Objects.WebError.#ctor(System.String,System.Object)">
            <summary>
            ctor
            </summary>
            <param name="message"></param>
            <param name="data"></param>
        </member>
        <member name="M:SharpCryptoExchange.Objects.WebError.#ctor(System.Int32,System.String,System.Object)">
            <summary>
            ctor
            </summary>
            <param name="code"></param>
            <param name="message"></param>
            <param name="data"></param>
        </member>
        <member name="T:SharpCryptoExchange.Objects.DeserializeError">
            <summary>
            Error while deserializing data
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Objects.DeserializeError.#ctor(System.String,System.Object)">
            <summary>
            ctor
            </summary>
            <param name="message">The error message</param>
            <param name="data">The data which caused the error</param>
        </member>
        <member name="T:SharpCryptoExchange.Objects.UnknownError">
            <summary>
            Unknown error
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Objects.UnknownError.#ctor(System.String,System.Object)">
            <summary>
            ctor
            </summary>
            <param name="message">Error message</param>
            <param name="data">Error data</param>
        </member>
        <member name="T:SharpCryptoExchange.Objects.ArgumentError">
            <summary>
            An invalid parameter has been provided
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Objects.ArgumentError.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:SharpCryptoExchange.Objects.RateLimitError">
            <summary>
            Rate limit exceeded
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Objects.RateLimitError.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:SharpCryptoExchange.Objects.CancellationRequestedError">
            <summary>
            Cancellation requested
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Objects.CancellationRequestedError.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="T:SharpCryptoExchange.Objects.InvalidOperationError">
            <summary>
            Invalid operation requested
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Objects.InvalidOperationError.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:SharpCryptoExchange.Objects.BaseOptions">
            <summary>
            Base options, applicable to everything
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.BaseOptions.LogLevel">
            <summary>
            The minimum log level to output
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.BaseOptions.LogWriters">
            <summary>
            The log writers
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.BaseOptions.OutputOriginalData">
            <summary>
            If true, the CallResult and DataEvent objects will also include the originally received json data in the OriginalData property
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Objects.BaseOptions.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Objects.BaseOptions.#ctor(SharpCryptoExchange.Objects.BaseOptions)">
            <summary>
            ctor
            </summary>
            <param name="baseOptions">Copy options from these options to the new options</param>
        </member>
        <member name="M:SharpCryptoExchange.Objects.BaseOptions.ToString">
            <inheritdoc />
        </member>
        <member name="T:SharpCryptoExchange.Objects.BaseClientOptions">
            <summary>
            Client options, for both the socket and rest clients
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.BaseClientOptions.Proxy">
            <summary>
            Proxy to use when connecting
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.BaseClientOptions.ApiCredentials">
            <summary>
            Api credentials to be used for signing requests to private endpoints. These credentials will be used for each API in the client, unless overriden in the API options 
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Objects.BaseClientOptions.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Objects.BaseClientOptions.#ctor(SharpCryptoExchange.Objects.BaseClientOptions)">
            <summary>
            ctor
            </summary>
            <param name="baseOptions">Copy options from these options to the new options</param>
        </member>
        <member name="M:SharpCryptoExchange.Objects.BaseClientOptions.ToString">
            <inheritdoc />
        </member>
        <member name="T:SharpCryptoExchange.Objects.BaseRestClientOptions">
            <summary>
            Rest client options
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.BaseRestClientOptions.RequestTimeout">
            <summary>
            The time the server has to respond to a request before timing out
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.BaseRestClientOptions.HttpClient">
            <summary>
            Http client to use. If a HttpClient is provided in this property the RequestTimeout and Proxy options provided in these options will be ignored in requests and should be set on the provided HttpClient instance
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Objects.BaseRestClientOptions.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Objects.BaseRestClientOptions.#ctor(SharpCryptoExchange.Objects.BaseRestClientOptions)">
            <summary>
            ctor
            </summary>
            <param name="baseOptions">Copy options from these options to the new options</param>
        </member>
        <member name="M:SharpCryptoExchange.Objects.BaseRestClientOptions.ToString">
            <inheritdoc />
        </member>
        <member name="T:SharpCryptoExchange.Objects.BaseSocketClientOptions">
            <summary>
            Socket client options
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.BaseSocketClientOptions.AutoReconnect">
            <summary>
            Whether or not the socket should automatically reconnect when losing connection
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.BaseSocketClientOptions.ReconnectInterval">
            <summary>
            Time to wait between reconnect attempts
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.BaseSocketClientOptions.MaxConcurrentResubscriptionsPerSocket">
            <summary>
            Max number of concurrent resubscription tasks per socket after reconnecting a socket
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.BaseSocketClientOptions.SocketResponseTimeout">
            <summary>
            The max time to wait for a response after sending a request on the socket before giving a timeout
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.BaseSocketClientOptions.SocketNoDataTimeout">
            <summary>
            The max time of not receiving any data after which the connection is assumed to be dropped. This can only be used for socket connections where a steady flow of data is expected,
            for example when the server sends intermittent ping requests
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.BaseSocketClientOptions.SocketSubscriptionsCombineTarget">
            <summary>
            The amount of subscriptions that should be made on a single socket connection. Not all API's support multiple subscriptions on a single socket.
            Setting this to a higher number increases subscription speed because not every subscription needs to connect to the server, but having more subscriptions on a 
            single connection will also increase the amount of traffic on that single connection, potentially leading to issues.
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.BaseSocketClientOptions.MaxSocketConnections">
            <summary>
            The max amount of connections to make to the server. Can be used for API's which only allow a certain number of connections. Changing this to a high value might cause issues.
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Objects.BaseSocketClientOptions.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Objects.BaseSocketClientOptions.#ctor(SharpCryptoExchange.Objects.BaseSocketClientOptions)">
            <summary>
            ctor
            </summary>
            <param name="baseOptions">Copy options from these options to the new options</param>
        </member>
        <member name="M:SharpCryptoExchange.Objects.BaseSocketClientOptions.ToString">
            <inheritdoc />
        </member>
        <member name="T:SharpCryptoExchange.Objects.ApiClientOptions">
            <summary>
            API client options
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.ApiClientOptions.BaseAddress">
            <summary>
            The base address of the API
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.ApiClientOptions.ApiCredentials">
            <summary>
            The api credentials used for signing requests to this API. Overrides API credentials provided in the client options
            </summary>        
        </member>
        <member name="M:SharpCryptoExchange.Objects.ApiClientOptions.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Objects.ApiClientOptions.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="baseAddress">Base address for the API</param>
        </member>
        <member name="M:SharpCryptoExchange.Objects.ApiClientOptions.#ctor(SharpCryptoExchange.Objects.ApiClientOptions,SharpCryptoExchange.Objects.ApiClientOptions)">
            <summary>
            ctor
            </summary>
            <param name="baseOptions">Copy values for the provided options</param>
            <param name="newValues">Copy values for the provided options</param>
        </member>
        <member name="M:SharpCryptoExchange.Objects.ApiClientOptions.ToString">
            <inheritdoc />
        </member>
        <member name="T:SharpCryptoExchange.Objects.RestApiClientOptions">
            <summary>
            Rest API client options
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.RestApiClientOptions.RateLimiters">
            <summary>
            List of rate limiters to use
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.RestApiClientOptions.RateLimitingBehaviour">
            <summary>
            What to do when a call would exceed the rate limit
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.RestApiClientOptions.AutoTimestamp">
            <summary>
            Whether or not to automatically sync the local time with the server time
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.RestApiClientOptions.TimestampRecalculationInterval">
            <summary>
            How often the timestamp adjustment between client and server is recalculated. If you need a very small TimeSpan here you're probably better of syncing your server time more often
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Objects.RestApiClientOptions.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Objects.RestApiClientOptions.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="baseAddress">Base address for the API</param>
        </member>
        <member name="M:SharpCryptoExchange.Objects.RestApiClientOptions.#ctor(SharpCryptoExchange.Objects.RestApiClientOptions,SharpCryptoExchange.Objects.RestApiClientOptions)">
            <summary>
            ctor
            </summary>
            <param name="baseOn">Copy values for the provided options</param>
            <param name="newValues">Copy values for the provided options</param>
        </member>
        <member name="M:SharpCryptoExchange.Objects.RestApiClientOptions.ToString">
            <inheritdoc />
        </member>
        <member name="T:SharpCryptoExchange.Objects.OrderBookOptions">
            <summary>
            Base for order book options
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.OrderBookOptions.ChecksumValidationEnabled">
            <summary>
            Whether or not checksum validation is enabled. Default is true, disabling will ignore checksum messages.
            </summary>
        </member>
        <member name="T:SharpCryptoExchange.Objects.RateLimiter">
            <summary>
            Limits the amount of requests to a certain constraint
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Objects.RateLimiter.#ctor">
            <summary>
            Create a new RateLimiter. Configure the rate limiter by calling <see cref="M:SharpCryptoExchange.Objects.RateLimiter.AddTotalRateLimit(System.Int32,System.TimeSpan)"/>, 
            <see cref="M:SharpCryptoExchange.Objects.RateLimiter.AddEndpointLimit(System.String,System.Int32,System.TimeSpan,System.Net.Http.HttpMethod,System.Boolean)"/>, <see cref="M:SharpCryptoExchange.Objects.RateLimiter.AddPartialEndpointLimit(System.String,System.Int32,System.TimeSpan,System.Net.Http.HttpMethod,System.Boolean,System.Boolean)"/> or <see cref="M:SharpCryptoExchange.Objects.RateLimiter.AddApiKeyLimit(System.Int32,System.TimeSpan,System.Boolean,System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Objects.RateLimiter.AddTotalRateLimit(System.Int32,System.TimeSpan)">
            <summary>
            Add a rate limit for the total amount of requests per time period
            </summary>
            <param name="limit">The limit per period. Note that this is weight, not single request, altough by default requests have a weight of 1</param>
            <param name="perTimePeriod">The time period the limit is for</param>
        </member>
        <member name="M:SharpCryptoExchange.Objects.RateLimiter.AddEndpointLimit(System.String,System.Int32,System.TimeSpan,System.Net.Http.HttpMethod,System.Boolean)">
            <summary>
            Add a rate lmit for the amount of requests per time for an endpoint
            </summary>
            <param name="endpoint">The endpoint the limit is for</param>
            <param name="limit">The limit per period. Note that this is weight, not single request, altough by default requests have a weight of 1</param>
            <param name="perTimePeriod">The time period the limit is for</param>
            <param name="method">The HttpMethod the limit is for, null for all</param>
            <param name="excludeFromOtherRateLimits">If set to true it ignores other rate limits</param>
        </member>
        <member name="M:SharpCryptoExchange.Objects.RateLimiter.AddEndpointLimit(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.TimeSpan,System.Net.Http.HttpMethod,System.Boolean)">
            <summary>
            Add a rate lmit for the amount of requests per time for an endpoint
            </summary>
            <param name="endpoints">The endpoints the limit is for</param>
            <param name="limit">The limit per period. Note that this is weight, not single request, altough by default requests have a weight of 1</param>
            <param name="perTimePeriod">The time period the limit is for</param>
            <param name="method">The HttpMethod the limit is for, null for all</param>
            <param name="excludeFromOtherRateLimits">If set to true it ignores other rate limits</param>
        </member>
        <member name="M:SharpCryptoExchange.Objects.RateLimiter.AddPartialEndpointLimit(System.String,System.Int32,System.TimeSpan,System.Net.Http.HttpMethod,System.Boolean,System.Boolean)">
            <summary>
            Add a rate lmit for the amount of requests per time for an endpoint
            </summary>
            <param name="endpoint">The endpoint the limit is for</param>
            <param name="limit">The limit per period. Note that this is weight, not single request, altough by default requests have a weight of 1</param>
            <param name="perTimePeriod">The time period the limit is for</param>
            <param name="method">The HttpMethod the limit is for, null for all</param>
            <param name="ignoreOtherRateLimits">If set to true it ignores other rate limits</param>
            <param name="countPerEndpoint">Whether all requests for this partial endpoint are bound to the same limit or each individual endpoint has its own limit</param>
        </member>
        <member name="M:SharpCryptoExchange.Objects.RateLimiter.AddApiKeyLimit(System.Int32,System.TimeSpan,System.Boolean,System.Boolean)">
            <summary>
            Add a rate limit for the amount of requests per Api key
            </summary>
            <param name="limit">The limit per period. Note that this is weight, not single request, altough by default requests have a weight of 1</param>
            <param name="perTimePeriod">The time period the limit is for</param>
            <param name="onlyForSignedRequests">Only include calls that are signed in this limiter</param>
            <param name="excludeFromTotalRateLimit">Exclude requests with API key from the total rate limiter</param>
        </member>
        <member name="M:SharpCryptoExchange.Objects.RateLimiter.LimitRequestAsync(SharpCryptoExchange.Logging.Log,System.String,System.Net.Http.HttpMethod,System.Boolean,System.Security.SecureString,SharpCryptoExchange.Objects.RateLimitingBehaviour,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:SharpCryptoExchange.Objects.TimeSyncState">
            <summary>
            The time synchronization state of an API client
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.TimeSyncState.ApiName">
            <summary>
            Name of the API
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.TimeSyncState.Semaphore">
            <summary>
            Semaphore to use for checking the time syncing. Should be shared instance among the API client
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.TimeSyncState.LastSyncTime">
            <summary>
            Last sync time for the API client
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.TimeSyncState.TimeOffset">
            <summary>
            Time offset for the API client
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Objects.TimeSyncState.#ctor(System.String)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="T:SharpCryptoExchange.Objects.TimeSyncInfo">
            <summary>
            Time synchronization info
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.TimeSyncInfo.Log">
            <summary>
            Logger
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.TimeSyncInfo.SyncTime">
            <summary>
            Should synchronize time
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.TimeSyncInfo.RecalculationInterval">
            <summary>
            Timestamp recalulcation interval
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Objects.TimeSyncInfo.TimeSyncState">
            <summary>
            Time sync state for the API client
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Objects.TimeSyncInfo.#ctor(SharpCryptoExchange.Logging.Log,System.Boolean,System.TimeSpan,SharpCryptoExchange.Objects.TimeSyncState)">
            <summary>
            ctor
            </summary>
            <param name="log"></param>
            <param name="recalculationInterval"></param>
            <param name="syncTime"></param>
            <param name="syncState"></param>
        </member>
        <member name="M:SharpCryptoExchange.Objects.TimeSyncInfo.UpdateTimeOffset(System.TimeSpan)">
            <summary>
            Set the time offset
            </summary>
            <param name="offset"></param>
        </member>
        <member name="T:SharpCryptoExchange.OrderBook.ProcessBufferRangeSequenceEntry">
            <summary>
            Buffer entry with a first and last update id
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.OrderBook.ProcessBufferRangeSequenceEntry.FirstUpdateId">
            <summary>
            First sequence number in this update
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.OrderBook.ProcessBufferRangeSequenceEntry.LastUpdateId">
            <summary>
            Last sequence number in this update
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.OrderBook.ProcessBufferRangeSequenceEntry.Asks">
            <summary>
            List of changed/new asks
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.OrderBook.ProcessBufferRangeSequenceEntry.Bids">
            <summary>
            List of changed/new bids
            </summary>
        </member>
        <member name="T:SharpCryptoExchange.OrderBook.SymbolOrderBook">
            <summary>
            Base for order book implementations
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.OrderBook.SymbolOrderBook.processBuffer">
            <summary>
            A buffer to store messages received before the initial book snapshot is processed. These messages
            will be processed after the book snapshot is set. Any messages in this buffer with sequence numbers lower
            than the snapshot sequence number will be discarded
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.OrderBook.SymbolOrderBook.asks">
            <summary>
            The ask list, should only be accessed using the bookLock
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.OrderBook.SymbolOrderBook.bids">
            <summary>
            The bid list, should only be accessed using the bookLock
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.OrderBook.SymbolOrderBook.log">
            <summary>
            The log
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.OrderBook.SymbolOrderBook.sequencesAreConsecutive">
            <summary>
            Whether update numbers are consecutive. If set to true and an update comes in which isn't the previous sequences number + 1
            the book will resynchronize as it is deemed out of sync
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.OrderBook.SymbolOrderBook.strictLevels">
            <summary>
            Whether levels should be strictly enforced. For example, when an order book has 25 levels and a new update comes in which pushes
            the current level 25 ask out of the top 25, should the curent the level 26 entry be removed from the book or does the 
            server handle this
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.OrderBook.SymbolOrderBook.bookSet">
            <summary>
            If the initial snapshot of the book has been set
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.OrderBook.SymbolOrderBook.Levels">
            <summary>
            The amount of levels for this book
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.OrderBook.SymbolOrderBook.Id">
            <inheritdoc/>
        </member>
        <member name="P:SharpCryptoExchange.OrderBook.SymbolOrderBook.Status">
            <inheritdoc/>
        </member>
        <member name="P:SharpCryptoExchange.OrderBook.SymbolOrderBook.LastSequenceNumber">
            <inheritdoc/>
        </member>
        <member name="P:SharpCryptoExchange.OrderBook.SymbolOrderBook.Symbol">
            <inheritdoc/>
        </member>
        <member name="E:SharpCryptoExchange.OrderBook.SymbolOrderBook.OnStatusChange">
            <inheritdoc/>
        </member>
        <member name="E:SharpCryptoExchange.OrderBook.SymbolOrderBook.OnBestOffersChanged">
            <inheritdoc/>
        </member>
        <member name="E:SharpCryptoExchange.OrderBook.SymbolOrderBook.OnOrderBookUpdate">
            <inheritdoc/>
        </member>
        <member name="P:SharpCryptoExchange.OrderBook.SymbolOrderBook.UpdateTime">
            <inheritdoc/>
        </member>
        <member name="P:SharpCryptoExchange.OrderBook.SymbolOrderBook.AskCount">
            <inheritdoc/>
        </member>
        <member name="P:SharpCryptoExchange.OrderBook.SymbolOrderBook.BidCount">
            <inheritdoc/>
        </member>
        <member name="P:SharpCryptoExchange.OrderBook.SymbolOrderBook.Asks">
            <inheritdoc/>
        </member>
        <member name="P:SharpCryptoExchange.OrderBook.SymbolOrderBook.Bids">
            <inheritdoc/>
        </member>
        <member name="P:SharpCryptoExchange.OrderBook.SymbolOrderBook.Book">
            <inheritdoc/>
        </member>
        <member name="P:SharpCryptoExchange.OrderBook.SymbolOrderBook.BestBid">
            <inheritdoc/>
        </member>
        <member name="P:SharpCryptoExchange.OrderBook.SymbolOrderBook.BestAsk">
            <inheritdoc/>
        </member>
        <member name="P:SharpCryptoExchange.OrderBook.SymbolOrderBook.BestOffers">
            <inheritdoc/>
        </member>
        <member name="M:SharpCryptoExchange.OrderBook.SymbolOrderBook.#ctor(System.String,System.String,SharpCryptoExchange.Objects.OrderBookOptions)">
            <summary>
            ctor
            </summary>
            <param name="id">The id of the order book. Should be set to {Exchange}[{type}], for example: Kucoin[Spot]</param>
            <param name="symbol">The symbol the order book is for</param>
            <param name="options">The options for the order book</param>
        </member>
        <member name="M:SharpCryptoExchange.OrderBook.SymbolOrderBook.StartAsync(System.Nullable{System.Threading.CancellationToken})">
            <inheritdoc/>
        </member>
        <member name="M:SharpCryptoExchange.OrderBook.SymbolOrderBook.StopAsync">
            <inheritdoc/>
        </member>
        <member name="M:SharpCryptoExchange.OrderBook.SymbolOrderBook.CalculateAverageFillPrice(System.Decimal,SharpCryptoExchange.Objects.OrderBookEntryType)">
            <inheritdoc/>
        </member>
        <member name="M:SharpCryptoExchange.OrderBook.SymbolOrderBook.DoStartAsync(System.Threading.CancellationToken)">
            <summary>
            Implementation for starting the order book. Should typically have logic for subscribing to the update stream and retrieving
            and setting the initial order book
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.OrderBook.SymbolOrderBook.DoReset">
            <summary>
            Reset the order book
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.OrderBook.SymbolOrderBook.DoResyncAsync(System.Threading.CancellationToken)">
            <summary>
            Resync the order book
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.OrderBook.SymbolOrderBook.DoChecksum(System.Int32)">
            <summary>
            Implementation for validating a checksum value with the current order book. If checksum validation fails (returns false)
            the order book will be resynchronized
            </summary>
            <param name="checksum"></param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.OrderBook.SymbolOrderBook.SetInitialOrderBook(System.Int64,System.Collections.Generic.IEnumerable{SharpCryptoExchange.Interfaces.ISymbolOrderBookEntry},System.Collections.Generic.IEnumerable{SharpCryptoExchange.Interfaces.ISymbolOrderBookEntry})">
            <summary>
            Set the initial data for the order book. Typically the snapshot which was requested from the Rest API, or the first snapshot
            received from a socket subcription
            </summary>
            <param name="orderBookSequenceNumber">The last update sequence number until which the snapshot is in sync</param>
            <param name="askList">List of asks</param>
            <param name="bidList">List of bids</param>
        </member>
        <member name="M:SharpCryptoExchange.OrderBook.SymbolOrderBook.UpdateOrderBook(System.Int64,System.Collections.Generic.IEnumerable{SharpCryptoExchange.Interfaces.ISymbolOrderBookEntry},System.Collections.Generic.IEnumerable{SharpCryptoExchange.Interfaces.ISymbolOrderBookEntry})">
            <summary>
            Add an update to the process queue. Updates the book by providing changed bids and asks, along with an update number which should be higher than the previous update numbers
            </summary>
            <param name="updateId">The sequence number</param>
            <param name="bids">List of updated/new bids</param>
            <param name="asks">List of updated/new asks</param>
        </member>
        <member name="M:SharpCryptoExchange.OrderBook.SymbolOrderBook.UpdateOrderBook(System.Int64,System.Int64,System.Collections.Generic.IEnumerable{SharpCryptoExchange.Interfaces.ISymbolOrderBookEntry},System.Collections.Generic.IEnumerable{SharpCryptoExchange.Interfaces.ISymbolOrderBookEntry})">
            <summary>
            Add an update to the process queue. Updates the book by providing changed bids and asks, along with the first and last sequence number in the update
            </summary>
            <param name="firstUpdateId">The sequence number of the first update</param>
            <param name="lastUpdateId">The sequence number of the last update</param>
            <param name="bids">List of updated/new bids</param>
            <param name="asks">List of updated/new asks</param>
        </member>
        <member name="M:SharpCryptoExchange.OrderBook.SymbolOrderBook.UpdateOrderBook(System.Collections.Generic.IEnumerable{SharpCryptoExchange.Interfaces.ISymbolOrderSequencedBookEntry},System.Collections.Generic.IEnumerable{SharpCryptoExchange.Interfaces.ISymbolOrderSequencedBookEntry})">
            <summary>
            Add an update to the process queue. Updates the book by providing changed bids and asks, each with its own sequence number
            </summary>
            <param name="bids">List of updated/new bids</param>
            <param name="asks">List of updated/new asks</param>
        </member>
        <member name="M:SharpCryptoExchange.OrderBook.SymbolOrderBook.AddChecksum(System.Int32)">
            <summary>
            Add a checksum value to the process queue
            </summary>
            <param name="checksum">The checksum value</param>
        </member>
        <member name="M:SharpCryptoExchange.OrderBook.SymbolOrderBook.CheckProcessBuffer">
            <summary>
            Check and empty the process buffer; see what entries to update the book with
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.OrderBook.SymbolOrderBook.ProcessUpdate(System.Int64,SharpCryptoExchange.Objects.OrderBookEntryType,SharpCryptoExchange.Interfaces.ISymbolOrderBookEntry)">
            <summary>
            Update order book with an entry
            </summary>
            <param name="sequence">Sequence number of the update</param>
            <param name="type">Type of entry</param>
            <param name="entry">The entry</param>
        </member>
        <member name="M:SharpCryptoExchange.OrderBook.SymbolOrderBook.WaitForSetOrderBookAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Wait until the order book snapshot has been set
            </summary>
            <param name="timeout">Max wait time</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.OrderBook.SymbolOrderBook.Dispose">
            <summary>
            IDisposable implementation for the order book
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.OrderBook.SymbolOrderBook.Dispose(System.Boolean)">
            <summary>
            Dispose method
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:SharpCryptoExchange.OrderBook.SymbolOrderBook.ToString">
            <summary>
            String representation of the top 3 entries
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.OrderBook.SymbolOrderBook.ToString(System.Int32)">
            <summary>
            String representation of the top x entries
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharpCryptoExchange.Requests.Request">
            <summary>
            Request object, wrapper for HttpRequestMessage
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Requests.Request.#ctor(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpClient,System.Int32)">
            <summary>
            Create request object for web request
            </summary>
            <param name="request"></param>
            <param name="client"></param>        
            <param name="requestId"></param>        
        </member>
        <member name="P:SharpCryptoExchange.Requests.Request.Content">
            <inheritdoc />
        </member>
        <member name="P:SharpCryptoExchange.Requests.Request.Accept">
            <inheritdoc />
        </member>
        <member name="P:SharpCryptoExchange.Requests.Request.Method">
            <inheritdoc />
        </member>
        <member name="P:SharpCryptoExchange.Requests.Request.Uri">
            <inheritdoc />
        </member>
        <member name="P:SharpCryptoExchange.Requests.Request.RequestId">
            <inheritdoc />
        </member>
        <member name="M:SharpCryptoExchange.Requests.Request.SetContent(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:SharpCryptoExchange.Requests.Request.AddHeader(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:SharpCryptoExchange.Requests.Request.GetHeaders">
            <inheritdoc />
        </member>
        <member name="M:SharpCryptoExchange.Requests.Request.SetContent(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:SharpCryptoExchange.Requests.Request.GetResponseAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:SharpCryptoExchange.Requests.RequestFactory">
            <summary>
            Request factory
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Requests.RequestFactory.Configure(System.TimeSpan,SharpCryptoExchange.Objects.ApiProxy,System.Net.Http.HttpClient)">
            <inheritdoc />
        </member>
        <member name="M:SharpCryptoExchange.Requests.RequestFactory.Create(System.Net.Http.HttpMethod,System.Uri,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:SharpCryptoExchange.Requests.Response">
            <summary>
            Response object, wrapper for HttpResponseMessage
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Requests.Response.StatusCode">
            <inheritdoc />
        </member>
        <member name="P:SharpCryptoExchange.Requests.Response.IsSuccessStatusCode">
            <inheritdoc />
        </member>
        <member name="P:SharpCryptoExchange.Requests.Response.ResponseHeaders">
            <inheritdoc />
        </member>
        <member name="M:SharpCryptoExchange.Requests.Response.#ctor(System.Net.Http.HttpResponseMessage)">
            <summary>
            Create response for a http response message
            </summary>
            <param name="response">The actual response</param>
        </member>
        <member name="M:SharpCryptoExchange.Requests.Response.GetResponseStreamAsync">
            <inheritdoc />
        </member>
        <member name="M:SharpCryptoExchange.Requests.Response.Close">
            <inheritdoc />
        </member>
        <member name="T:SharpCryptoExchange.Sockets.CryptoExchangeWebSocketClient">
            <summary>
            A wrapper around the ClientWebSocket
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.Sockets.CryptoExchangeWebSocketClient._receivedMessages">
            <summary>
            Received messages, the size and the timstamp
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.Sockets.CryptoExchangeWebSocketClient._receivedMessagesLock">
            <summary>
            Received messages lock
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.Sockets.CryptoExchangeWebSocketClient._log">
            <summary>
            Log
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.CryptoExchangeWebSocketClient.Id">
            <inheritdoc />
        </member>
        <member name="P:SharpCryptoExchange.Sockets.CryptoExchangeWebSocketClient.Parameters">
            <inheritdoc />
        </member>
        <member name="P:SharpCryptoExchange.Sockets.CryptoExchangeWebSocketClient.LastActionTime">
            <summary>
            The timestamp this socket has been active for the last time
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.CryptoExchangeWebSocketClient.Uri">
            <inheritdoc />
        </member>
        <member name="P:SharpCryptoExchange.Sockets.CryptoExchangeWebSocketClient.IsClosed">
            <inheritdoc />
        </member>
        <member name="P:SharpCryptoExchange.Sockets.CryptoExchangeWebSocketClient.IsOpen">
            <inheritdoc />
        </member>
        <member name="P:SharpCryptoExchange.Sockets.CryptoExchangeWebSocketClient.IncomingKbps">
            <inheritdoc />
        </member>
        <member name="E:SharpCryptoExchange.Sockets.CryptoExchangeWebSocketClient.OnClose">
            <inheritdoc />
        </member>
        <member name="E:SharpCryptoExchange.Sockets.CryptoExchangeWebSocketClient.OnMessage">
            <inheritdoc />
        </member>
        <member name="E:SharpCryptoExchange.Sockets.CryptoExchangeWebSocketClient.OnError">
            <inheritdoc />
        </member>
        <member name="E:SharpCryptoExchange.Sockets.CryptoExchangeWebSocketClient.OnOpen">
            <inheritdoc />
        </member>
        <member name="E:SharpCryptoExchange.Sockets.CryptoExchangeWebSocketClient.OnReconnecting">
            <inheritdoc />
        </member>
        <member name="E:SharpCryptoExchange.Sockets.CryptoExchangeWebSocketClient.OnReconnected">
            <inheritdoc />
        </member>
        <member name="P:SharpCryptoExchange.Sockets.CryptoExchangeWebSocketClient.GetReconnectionUrl">
            <inheritdoc />
        </member>
        <member name="M:SharpCryptoExchange.Sockets.CryptoExchangeWebSocketClient.#ctor(SharpCryptoExchange.Logging.Log,SharpCryptoExchange.Sockets.WebSocketParameters)">
            <summary>
            ctor
            </summary>
            <param name="log">The log object to use</param>
            <param name="websocketParameters">The parameters for this socket</param>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.CryptoExchangeWebSocketClient.ConnectAsync">
            <inheritdoc />
        </member>
        <member name="M:SharpCryptoExchange.Sockets.CryptoExchangeWebSocketClient.CreateSocket">
            <summary>
            Create the socket object
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.CryptoExchangeWebSocketClient.ProcessAsync">
            <inheritdoc />
        </member>
        <member name="M:SharpCryptoExchange.Sockets.CryptoExchangeWebSocketClient.Send(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SharpCryptoExchange.Sockets.CryptoExchangeWebSocketClient.ReconnectAsync">
            <inheritdoc />
        </member>
        <member name="M:SharpCryptoExchange.Sockets.CryptoExchangeWebSocketClient.CloseAsync">
            <inheritdoc />
        </member>
        <member name="M:SharpCryptoExchange.Sockets.CryptoExchangeWebSocketClient.CloseInternalAsync">
            <summary>
            Internal close method
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.CryptoExchangeWebSocketClient.Dispose">
            <summary>
            Dispose the socket
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.CryptoExchangeWebSocketClient.SendLoopAsync">
            <summary>
            Loop for sending data
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.CryptoExchangeWebSocketClient.ReceiveLoopAsync">
            <summary>
            Loop for receiving and reassembling data
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.CryptoExchangeWebSocketClient.HandleMessage(System.Byte[],System.Int32,System.Int32,System.Net.WebSockets.WebSocketMessageType)">
            <summary>
            Handles the message
            </summary>
            <param name="data"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="messageType"></param>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.CryptoExchangeWebSocketClient.TriggerOnMessage(System.String)">
            <summary>
            Trigger the OnMessage event
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.CryptoExchangeWebSocketClient.TriggerOnError(System.Exception)">
            <summary>
            Trigger the OnError event
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.CryptoExchangeWebSocketClient.TriggerOnOpen">
            <summary>
            Trigger the OnError event
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.CryptoExchangeWebSocketClient.TriggerOnClose">
            <summary>
            Trigger the OnError event
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.CryptoExchangeWebSocketClient.TriggerOnReconnecting">
            <summary>
            Trigger the OnReconnecting event
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.CryptoExchangeWebSocketClient.TriggerOnReconnected">
            <summary>
            Trigger the OnReconnected event
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.CryptoExchangeWebSocketClient.CheckTimeoutAsync">
            <summary>
            Checks if there is no data received for a period longer than the specified timeout
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.CryptoExchangeWebSocketClient.NextStreamId">
            <summary>
            Get the next identifier
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.CryptoExchangeWebSocketClient.UpdateReceivedMessages">
            <summary>
            Update the received messages list, removing messages received longer than 3s ago
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.CryptoExchangeWebSocketClient.SetProxy(SharpCryptoExchange.Objects.ApiProxy)">
            <summary>
            Set proxy on socket
            </summary>
            <param name="proxy"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:SharpCryptoExchange.Sockets.ReceiveItem">
            <summary>
            Received message info
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.ReceiveItem.Timestamp">
            <summary>
            Timestamp of the received data
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.ReceiveItem.Bytes">
            <summary>
            Number of bytes received
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.ReceiveItem.#ctor(System.DateTime,System.Int32)">
            <summary>
            ctor
            </summary>
            <param name="timestamp"></param>
            <param name="bytes"></param>
        </member>
        <member name="T:SharpCryptoExchange.Sockets.DataEvent`1">
            <summary>
            An update received from a socket update subscription
            </summary>
            <typeparam name="T">The type of the data</typeparam>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.DataEvent`1.Timestamp">
            <summary>
            The timestamp the data was received
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.DataEvent`1.Topic">
            <summary>
            The topic of the update, what symbol/asset etc..
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.DataEvent`1.OriginalData">
            <summary>
            The original data that was received, only available when OutputOriginalData is set to true in the client options
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.DataEvent`1.Data">
            <summary>
            The received data deserialized into an object
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.DataEvent`1.#ctor(`0,System.DateTime)">
            <summary>
            Ctor
            </summary>
            <param name="data"></param>
            <param name="timestamp"></param>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.DataEvent`1.As``1(``0)">
            <summary>
            Create a new DataEvent with data in the from of type K based on the current DataEvent. Topic, OriginalData and Timestamp will be copied over
            </summary>
            <typeparam name="K">The type of the new data</typeparam>
            <param name="data">The new data</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.DataEvent`1.As``1(``0,System.String)">
            <summary>
            Create a new DataEvent with data in the from of type K based on the current DataEvent. OriginalData and Timestamp will be copied over
            </summary>
            <typeparam name="K">The type of the new data</typeparam>
            <param name="data">The new data</param>
            <param name="topic">The new topic</param>
            <returns></returns>
        </member>
        <member name="T:SharpCryptoExchange.Sockets.MessageEvent">
            <summary>
            Message received event
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.MessageEvent.Connection">
            <summary>
            The connection the message was received on
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.MessageEvent.JsonData">
            <summary>
            The json object of the data
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.MessageEvent.OriginalData">
            <summary>
            The originally received string data
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.MessageEvent.ReceivedTimestamp">
            <summary>
            The timestamp of when the data was received
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.MessageEvent.#ctor(SharpCryptoExchange.Sockets.SocketConnection,Newtonsoft.Json.Linq.JToken,System.String,System.DateTime)">
            <summary>
            ctor
            </summary>
            <param name="connection"></param>
            <param name="jsonData"></param>
            <param name="originalData"></param>
            <param name="timestamp"></param>
        </member>
        <member name="T:SharpCryptoExchange.Sockets.SocketConnection">
            <summary>
            A single socket connection to the server
            </summary>
        </member>
        <member name="E:SharpCryptoExchange.Sockets.SocketConnection.ConnectionLost">
            <summary>
            Connection lost event
            </summary>
        </member>
        <member name="E:SharpCryptoExchange.Sockets.SocketConnection.ConnectionClosed">
            <summary>
            Connection closed and no reconnect is happening
            </summary>
        </member>
        <member name="E:SharpCryptoExchange.Sockets.SocketConnection.ConnectionRestored">
            <summary>
            Connecting restored event
            </summary>
        </member>
        <member name="E:SharpCryptoExchange.Sockets.SocketConnection.ActivityPaused">
            <summary>
            The connection is paused event
            </summary>
        </member>
        <member name="E:SharpCryptoExchange.Sockets.SocketConnection.ActivityUnpaused">
            <summary>
            The connection is unpaused event
            </summary>
        </member>
        <member name="E:SharpCryptoExchange.Sockets.SocketConnection.UnhandledMessage">
            <summary>
            Unhandled message event
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.SocketConnection.SubscriptionCount">
            <summary>
            The amount of subscriptions on this connection
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.SocketConnection.Subscriptions">
            <summary>
            Get a copy of the current subscriptions
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.SocketConnection.Authenticated">
            <summary>
            If the connection has been authenticated
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.SocketConnection.Connected">
            <summary>
            If connection is made
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.SocketConnection.SocketId">
            <summary>
            The unique ID of the socket
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.SocketConnection.IncomingKbps">
            <summary>
            The current kilobytes per second of data being received, averaged over the last 3 seconds
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.SocketConnection.ConnectionUri">
            <summary>
            The connection uri
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.SocketConnection.ApiClient">
            <summary>
            The API client the connection is for
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.SocketConnection.DisconnectTime">
            <summary>
            Time of disconnecting
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.SocketConnection.Tag">
            <summary>
            Tag for identificaion
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.SocketConnection.PausedActivity">
            <summary>
            If activity is paused
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.SocketConnection.Status">
            <summary>
            Status of the socket connection
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.Sockets.SocketConnection._socket">
            <summary>
            The underlying websocket
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.SocketConnection.#ctor(SharpCryptoExchange.BaseSocketClient,SharpCryptoExchange.SocketApiClient,SharpCryptoExchange.Interfaces.IWebsocket,System.String)">
            <summary>
            New socket connection
            </summary>
            <param name="client">The socket client</param>
            <param name="apiClient">The api client</param>
            <param name="socket">The socket</param>
            <param name="tag"></param>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.SocketConnection.HandleOpen">
            <summary>
            Handler for a socket opening
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.SocketConnection.HandleClose">
            <summary>
            Handler for a socket closing without reconnect
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.SocketConnection.HandleReconnecting">
            <summary>
            Handler for a socket losing conenction and starting reconnect
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.SocketConnection.GetReconnectionUrlAsync">
            <summary>
            Get the url to connect to when reconnecting
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.SocketConnection.HandleReconnected">
            <summary>
            Handler for a socket which has reconnected
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.SocketConnection.HandleError(System.Exception)">
            <summary>
            Handler for an error on a websocket
            </summary>
            <param name="e">The exception</param>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.SocketConnection.HandleMessage(System.String)">
            <summary>
            Process a message received by the socket
            </summary>
            <param name="data">The received data</param>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.SocketConnection.ConnectAsync">
            <summary>
            Connect the websocket
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.SocketConnection.GetSocket">
            <summary>
            Retrieve the underlying socket
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.SocketConnection.TriggerReconnectAsync">
            <summary>
            Trigger a reconnect of the socket connection
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.SocketConnection.CloseAsync">
            <summary>
            Close the connection
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.SocketConnection.CloseAsync(SharpCryptoExchange.Sockets.SocketSubscription)">
            <summary>
            Close a subscription on this connection. If all subscriptions on this connection are closed the connection gets closed as well
            </summary>
            <param name="subscription">Subscription to close</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.SocketConnection.Dispose">
            <summary>
            Dispose the connection
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.SocketConnection.AddSubscription(SharpCryptoExchange.Sockets.SocketSubscription)">
            <summary>
            Add a subscription to this connection
            </summary>
            <param name="subscription"></param>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.SocketConnection.GetSubscription(System.Int32)">
            <summary>
            Get a subscription on this connection by id
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.SocketConnection.GetSubscriptionByRequest(System.Func{System.Object,System.Boolean})">
            <summary>
            Get a subscription on this connection by its subscribe request
            </summary>
            <param name="predicate">Filter for a request</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.SocketConnection.HandleData(SharpCryptoExchange.Sockets.MessageEvent)">
            <summary>
            Process data
            </summary>
            <param name="messageEvent"></param>
            <returns>True if the data was successfully handled</returns>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.SocketConnection.SendAndWaitAsync``1(``0,System.TimeSpan,System.Func{Newtonsoft.Json.Linq.JToken,System.Boolean})">
            <summary>
            Send data and wait for an answer
            </summary>
            <typeparam name="T">The data type expected in response</typeparam>
            <param name="obj">The object to send</param>
            <param name="timeout">The timeout for response</param>
            <param name="handler">The response handler, should return true if the received JToken was the response to the request</param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.SocketConnection.Send``1(``0,Newtonsoft.Json.NullValueHandling)">
            <summary>
            Send data over the websocket connection
            </summary>
            <typeparam name="T">The type of the object to send</typeparam>
            <param name="obj">The object to send</param>
            <param name="nullValueHandling">How null values should be serialized</param>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.SocketConnection.Send(System.String)">
            <summary>
            Send string data over the websocket connection
            </summary>
            <param name="data">The data to send</param>
        </member>
        <member name="T:SharpCryptoExchange.Sockets.SocketConnection.SocketStatus">
            <summary>
            Status of the socket connection
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.Sockets.SocketConnection.SocketStatus.None">
            <summary>
            None/Initial
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.Sockets.SocketConnection.SocketStatus.Connected">
            <summary>
            Connected
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.Sockets.SocketConnection.SocketStatus.Reconnecting">
            <summary>
            Reconnecting
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.Sockets.SocketConnection.SocketStatus.Resubscribing">
            <summary>
            Resubscribing on reconnected socket
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.Sockets.SocketConnection.SocketStatus.Closing">
            <summary>
            Closing
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.Sockets.SocketConnection.SocketStatus.Closed">
            <summary>
            Closed
            </summary>
        </member>
        <member name="F:SharpCryptoExchange.Sockets.SocketConnection.SocketStatus.Disposed">
            <summary>
            Disposed
            </summary>
        </member>
        <member name="T:SharpCryptoExchange.Sockets.SocketSubscription">
            <summary>
            Socket subscription
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.SocketSubscription.Id">
            <summary>
            Unique subscription id
            </summary>
        </member>
        <member name="E:SharpCryptoExchange.Sockets.SocketSubscription.Exception">
            <summary>
            Exception event
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.SocketSubscription.MessageHandler">
            <summary>
            Message handlers for this subscription. Should return true if the message is handled and should not be distributed to the other handlers
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.SocketSubscription.Request">
            <summary>
            The request object send when subscribing on the server. Either this or the `Identifier` property should be set
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.SocketSubscription.Identifier">
            <summary>
            The subscription identifier, used instead of a `Request` object to identify the subscription
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.SocketSubscription.UserSubscription">
            <summary>
            Whether this is a user subscription or an internal listener
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.SocketSubscription.Confirmed">
            <summary>
            If the subscription has been confirmed to be subscribed by the server
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.SocketSubscription.Authenticated">
            <summary>
            Whether authentication is needed for this subscription
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.SocketSubscription.Closed">
            <summary>
            Whether we're closing this subscription and a socket connection shouldn't be kept open for it
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.SocketSubscription.CancellationTokenRegistration">
            <summary>
            Cancellation token registration, should be disposed when subscription is closed. Used for closing the subscription with 
            a provided cancelation token
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.SocketSubscription.CreateForRequest(System.Int32,System.Object,System.Boolean,System.Boolean,System.Action{SharpCryptoExchange.Sockets.MessageEvent})">
            <summary>
            Create SocketSubscription for a subscribe request
            </summary>
            <param name="id"></param>
            <param name="request"></param>
            <param name="userSubscription"></param>
            <param name="authenticated"></param>
            <param name="dataHandler"></param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.SocketSubscription.CreateForIdentifier(System.Int32,System.String,System.Boolean,System.Boolean,System.Action{SharpCryptoExchange.Sockets.MessageEvent})">
            <summary>
            Create SocketSubscription for an identifier
            </summary>
            <param name="id"></param>
            <param name="identifier"></param>
            <param name="userSubscription"></param>
            <param name="authenticated"></param>
            <param name="dataHandler"></param>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.SocketSubscription.InvokeExceptionHandler(System.Exception)">
            <summary>
            Invoke the exception event
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:SharpCryptoExchange.Sockets.UpdateSubscription">
            <summary>
            Subscription to a data stream
            </summary>
        </member>
        <member name="E:SharpCryptoExchange.Sockets.UpdateSubscription.ConnectionLost">
            <summary>
            Event when the connection is lost. The socket will automatically reconnect when possible.
            </summary>
        </member>
        <member name="E:SharpCryptoExchange.Sockets.UpdateSubscription.ConnectionClosed">
            <summary>
            Event when the connection is closed and will not be reconnected
            </summary>
        </member>
        <member name="E:SharpCryptoExchange.Sockets.UpdateSubscription.ConnectionRestored">
            <summary>
            Event when the connection is restored. Timespan parameter indicates the time the socket has been offline for before reconnecting. 
            Note that when the executing code is suspended and resumed at a later period (for example, a laptop going to sleep) the disconnect time will be incorrect as the diconnect
            will only be detected after resuming the code, so the initial disconnect time is lost. Use the timespan only for informational purposes.
            </summary>
        </member>
        <member name="E:SharpCryptoExchange.Sockets.UpdateSubscription.ActivityPaused">
            <summary>
            Event when the connection to the server is paused based on a server indication. No operations can be performed while paused
            </summary>
        </member>
        <member name="E:SharpCryptoExchange.Sockets.UpdateSubscription.ActivityUnpaused">
            <summary>
            Event when the connection to the server is unpaused after being paused
            </summary>
        </member>
        <member name="E:SharpCryptoExchange.Sockets.UpdateSubscription.Exception">
            <summary>
            Event when an exception happens during the handling of the data
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.UpdateSubscription.SocketId">
            <summary>
            The id of the socket
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.UpdateSubscription.Id">
            <summary>
            The id of the subscription
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.UpdateSubscription.#ctor(SharpCryptoExchange.Sockets.SocketConnection,SharpCryptoExchange.Sockets.SocketSubscription)">
            <summary>
            ctor
            </summary>
            <param name="connection">The socket connection the subscription is on</param>
            <param name="subscription">The subscription</param>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.UpdateSubscription.CloseAsync">
            <summary>
            Close the subscription
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.UpdateSubscription.ReconnectAsync">
            <summary>
            Close the socket to cause a reconnect
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.UpdateSubscription.UnsubscribeAsync">
            <summary>
            Unsubscribe a subscription
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.UpdateSubscription.ResubscribeAsync">
            <summary>
            Resubscribe this subscription
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharpCryptoExchange.Sockets.WebsocketFactory">
            <summary>
            Default websocket factory implementation
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.WebsocketFactory.CreateWebsocket(SharpCryptoExchange.Logging.Log,SharpCryptoExchange.Sockets.WebSocketParameters)">
            <inheritdoc />
        </member>
        <member name="T:SharpCryptoExchange.Sockets.WebSocketParameters">
            <summary>
            Parameters for a websocket
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.WebSocketParameters.Uri">
            <summary>
            The uri to connect to
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.WebSocketParameters.Headers">
            <summary>
            Headers to send in the connection handshake
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.WebSocketParameters.Cookies">
            <summary>
            Cookies to send in the connection handshake
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.WebSocketParameters.ReconnectInterval">
            <summary>
            The time to wait between reconnect attempts
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.WebSocketParameters.Proxy">
            <summary>
            Proxy for the connection
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.WebSocketParameters.AutoReconnect">
            <summary>
            Whether the socket should automatically reconnect when connection is lost
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.WebSocketParameters.Timeout">
            <summary>
            The maximum time of no data received before considering the connection lost and closting/reconnecting the socket
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.WebSocketParameters.KeepAliveInterval">
            <summary>
            Interval at which to send ping frames
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.WebSocketParameters.RatelimitPerSecond">
            <summary>
            The max amount of messages to send per second
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.WebSocketParameters.Origin">
            <summary>
            Origin header value to send in the connection handshake
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.WebSocketParameters.DataInterpreterBytes">
            <summary>
            Delegate used for processing byte data received from socket connections before it is processed by handlers
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.WebSocketParameters.DataInterpreterString">
            <summary>
            Delegate used for processing string data received from socket connections before it is processed by handlers
            </summary>
        </member>
        <member name="P:SharpCryptoExchange.Sockets.WebSocketParameters.Encoding">
            <summary>
            Encoding for sending/receiving data
            </summary>
        </member>
        <member name="M:SharpCryptoExchange.Sockets.WebSocketParameters.#ctor(System.Uri,System.Boolean)">
            <summary>
            ctor
            </summary>
            <param name="uri">Uri</param>
            <param name="autoReconnect">Auto reconnect</param>
        </member>
    </members>
</doc>
